{"pageProps":{"versions":["v4.0.0-rc.12","v3.8.2","latest@main"],"version":"v3.8.2","def":{"qualifiedName":"fromJS","call":{"name":"fromJS","label":"fromJS()","id":"fromJS()","doc":{"synopsis":"<p>Deeply converts plain JS objects and arrays to Immutable Maps and Lists.</p>\n","description":"<p>If a <code><span class=\"t param\">reviver</span></code> is optionally provided, it will be called with every\ncollection as a Seq (beginning with the most nested collections\nand proceeding to the top-level collection itself), along with the key\nrefering to each collection and the parent JS object provided as <code><span class=\"token var\" >this</span></code>.\nFor the top level, object, the key will be <code><span class=\"token string\" >\"\"</span></code>. This <code><span class=\"t param\">reviver</span></code> is expected\nto return a new Immutable Iterable, allowing for custom conversions from\ndeep JS objects.</p>\n<p>This example converts JSON to List and OrderedMap:</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>fromJS<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >var</span> isIndexed <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Iterable</span><span class=\"token punctuation\" >.</span>isIndexed<span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >return</span> isIndexed <span class=\"token operator\" >?</span> value<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >:</span> value<span class=\"token punctuation\" >.</span>toOrderedMap<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// true, \"b\", {b: [10, 20, 30]}\n</span><span class=\"token comment\" spellcheck=\"true\">// false, \"a\", {a: {b: [10, 20, 30]}, c: 40}\n</span><span class=\"token comment\" spellcheck=\"true\">// false, \"\", {\"\": {a: {b: [10, 20, 30]}, c: 40}}</span></code><p>If <code><span class=\"t param\">reviver</span></code> is not provided, the default behavior will convert Arrays into\nLists and Objects into Maps.</p>\n<p><code><span class=\"t param\">reviver</span></code> acts similarly to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\" title=\"Using the reviver parameter\">same parameter in <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\" target=\"_blank\" rel=\"noopener\">JSON.parse</a></code></a>.</p>\n<p><code><a href=\"/docs/v3.8.2/fromJS()\">Immutable.fromJS</a></code> is conservative in its conversion. It will only convert\narrays which pass <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\" target=\"_blank\" rel=\"noopener\">Array.isArray</a></code> to Lists, and only raw objects (no custom\nprototype) to Map.</p>\n<p>Keep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a\nquote-less shorthand, while Immutable Maps accept keys of any type.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> obj <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"one\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token qualifier\" >Object</span><span class=\"token punctuation\" >.</span>keys<span class=\"token punctuation\" >(</span>obj<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// [ \"1\" ]\n</span>obj<span class=\"token punctuation\" >[</span><span class=\"token string\" >\"1\"</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// \"one\"\n</span>obj<span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >;</span>   <span class=\"token comment\" spellcheck=\"true\">// \"one\"\n</span>\n<span class=\"token keyword\" >var</span> map <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span>obj<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nmap<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >\"1\"</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// \"one\"\n</span>map<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>   <span class=\"token comment\" spellcheck=\"true\">// undefined</span></code><p>Property access for JavaScript Objects first converts the key to a string,\nbut since Immutable Map keys can be of any type the argument to <code><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> is\nnot altered.</p>\n","notes":[]},"signatures":[{"line":83,"params":[{"name":"json","type":{"k":1}},{"name":"reviver","type":{"k":10,"params":[{"name":"k","type":{"k":1}},{"name":"v","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}]}}],"type":{"k":1}},"optional":true}],"type":{"k":1}}],"url":"/docs/v3.8.2/fromJS()"},"label":"fromJS()","url":"/docs/v3.8.2/fromJS()"},"sidebarLinks":[{"label":"fromJS()","url":"/docs/v3.8.2/fromJS()"},{"label":"is()","url":"/docs/v3.8.2/is()"},{"label":"List","url":"/docs/v3.8.2/List"},{"label":"Map","url":"/docs/v3.8.2/Map"},{"label":"OrderedMap","url":"/docs/v3.8.2/OrderedMap"},{"label":"Set","url":"/docs/v3.8.2/Set"},{"label":"OrderedSet","url":"/docs/v3.8.2/OrderedSet"},{"label":"Stack","url":"/docs/v3.8.2/Stack"},{"label":"Range()","url":"/docs/v3.8.2/Range()"},{"label":"Repeat()","url":"/docs/v3.8.2/Repeat()"},{"label":"Record()","url":"/docs/v3.8.2/Record()"},{"label":"Record.Class","url":"/docs/v3.8.2/Record.Class"},{"label":"Seq","url":"/docs/v3.8.2/Seq"},{"label":"Seq.Keyed","url":"/docs/v3.8.2/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v3.8.2/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v3.8.2/Seq.Set"},{"label":"Iterable","url":"/docs/v3.8.2/Iterable"},{"label":"Iterable.Keyed","url":"/docs/v3.8.2/Iterable.Keyed"},{"label":"Iterable.Indexed","url":"/docs/v3.8.2/Iterable.Indexed"},{"label":"Iterable.Set","url":"/docs/v3.8.2/Iterable.Set"},{"label":"Collection","url":"/docs/v3.8.2/Collection"},{"label":"Collection.Keyed","url":"/docs/v3.8.2/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v3.8.2/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v3.8.2/Collection.Set"}]},"__N_SSG":true}