{"pageProps":{"versions":["v4.0.0-rc.12","v3.8.2","latest@main"],"version":"v3.8.2","def":{"qualifiedName":"Seq","doc":{"synopsis":"<p>Represents a sequence of values, but may not be backed by a concrete data\nstructure.</p>\n","description":"<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any\nmutative method called on a <code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code> will return a new <code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code>.</p>\n<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any\nmethod call. Values are often created during iteration, including implicit\niteration when reducing or converting to a concrete data structure such as\na <code><a href=\"/docs/v3.8.2/List\">List</a></code> or JavaScript <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>.</p>\n<p>For example, the following performs no work, because the resulting\nSeq&#39;s values are never iterated:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> oddSquares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >7</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >8</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Once the Seq is used, it performs only the work necessary. In this\nexample, no intermediate data structures are ever created, filter is only\ncalled three times, and map is only called once:</p>\n<code class=\"codeBlock\">console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span>oddSquares<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 9</span></code><p>Seq allows for the efficient chaining of operations,\nallowing for the expression of logic that can otherwise be very tedious:</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>flip<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>key <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> key<span class=\"token punctuation\" >.</span>toUpperCase<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flip<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>toObject<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { A: 1, B: 1, C: 1 }</span></code><p>As well as expressing logic that would otherwise be memory or time limited:</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skip<span class=\"token punctuation\" >(</span><span class=\"token number\" >1000</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token operator\" >-</span>n<span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> n <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>take<span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>r<span class=\"token punctuation\" >,</span> n<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> r <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 1006008</span></code><p>Seq is often used to provide a rich collection API to JavaScript Object.</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >*</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>toObject<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// { x: 0, y: 2, z: 4 }</span></code>","notes":[]},"functions":{"isSeq":{"name":"Seq.isSeq","label":"Seq.isSeq()","id":"isSeq()","isStatic":true,"signatures":[{"line":1200,"params":[{"name":"maybeSeq","type":{"k":1}}],"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#isSeq()"},"of":{"name":"Seq.of","label":"Seq.of()","id":"of()","isStatic":true,"signatures":[{"line":1205,"typeParams":["T"],"params":[{"name":"values","type":{"k":9,"type":{"k":11,"param":"T"}},"varArgs":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.2/Seq.Indexed"}}],"url":"/docs/v3.8.2/Seq#of()"}},"call":{"name":"Seq","label":"Seq()","id":"Seq()","signatures":[{"line":1314,"typeParams":["K","V"],"type":{"k":12,"name":"Seq","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq"}},{"line":1315,"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":12,"name":"Seq","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq"}}],"type":{"k":12,"name":"Seq","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq"}},{"line":1316,"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"type":{"k":12,"name":"Seq","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq"}},{"line":1317,"typeParams":["T"],"params":[{"name":"array","type":{"k":12,"name":"Array","args":[{"k":11,"param":"T"}]}}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.2/Seq.Indexed"}},{"line":1318,"typeParams":["V"],"params":[{"name":"obj","type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":7},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq.Keyed"}},{"line":1319,"typeParams":["T"],"params":[{"name":"iterator","type":{"k":12,"name":"Iterator","args":[{"k":11,"param":"T"}]}}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.2/Seq.Indexed"}},{"line":1320,"typeParams":["T"],"params":[{"name":"iterable","type":{"k":12,"name":"Object"}}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.2/Seq.Indexed"}}],"url":"/docs/v3.8.2/Seq#Seq()"},"interface":{"members":{"size":{"name":"size","label":"size","id":"size","line":1334,"doc":{"synopsis":"<p>Some Seqs can describe their size lazily. When this is the case,\nsize will be an integer. Otherwise it will be undefined.</p>\n","description":"<p>For example, Seqs returned from <code><a href=\"/docs/v3.8.2/Seq#map()\">map()</a></code> or <code><a href=\"/docs/v3.8.2/Seq#reverse()\">reverse()</a></code>\npreserve the size of the original <code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code> while <code><a href=\"/docs/v3.8.2/Seq#filter()\">filter()</a></code> does not.</p>\n<p>Note: <code><a href=\"/docs/v3.8.2/Range()\">Range</a></code>, <code><a href=\"/docs/v3.8.2/Repeat()\">Repeat</a></code> and <code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code>s made from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>s and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>s will\nalways have a size.</p>\n","notes":[]},"type":{"k":6},"url":"/docs/v3.8.2/Seq#size"},"cacheResult":{"name":"cacheResult","label":"cacheResult()","id":"cacheResult()","group":"Force evaluation","doc":{"synopsis":"<p>Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called a total\nof 6 times, as each <code><a href=\"/docs/v3.8.2/Seq#join()\">join</a></code> iterates the Seq of three values.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ><em></span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>If you know a <code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code> will be used multiple times, it may be more\nefficient to first cache it in memory. Here, the map function is called\nonly 3 times.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ></em></span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>cacheResult<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Use this method judiciously, as it must fully evaluate a Seq which can be\na burden on memory and possibly performance.</p></p>\n<p>Note: after calling <code><a href=\"/docs/v3.8.2/Seq#cacheResult()\">cacheResult</a></code>, a Seq will always have a <code><a href=\"/docs/v3.8.2/Seq#size\">size</a></code>.</p>\n","notes":[]},"signatures":[{"line":1359,"type":{"k":12,"name":"Seq","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq"}}],"url":"/docs/v3.8.2/Seq#cacheResult()"},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","doc":{"synopsis":"<p>True if this and the other Iterable have value equality, as defined\nby <code><a href=\"/docs/v3.8.2/is()\">Immutable.is()</a></code>.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":1715,"params":[{"name":"other","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#equals()","inherited":{"interface":"Iterable","label":"equals()","url":"/docs/v3.8.2/Iterable#equals()"}},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","doc":{"synopsis":"<p>Computes and returns the hashed identity for this Iterable.</p>\n","description":"<p>The <code><a href=\"/docs/v3.8.2/List#hashCode()\">hashCode</a></code> of an Iterable is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/v3.8.2/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/v3.8.2/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >!</span><span class=\"token operator\" >==</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >var</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>If two values have the same <code><a href=\"/docs/v3.8.2/List#hashCode()\">hashCode</a></code>, they are <a href=\"http://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/v3.8.2/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n","notes":[]},"signatures":[{"line":1736,"type":{"k":6}}],"url":"/docs/v3.8.2/Seq#hashCode()","inherited":{"interface":"Iterable","label":"hashCode()","url":"/docs/v3.8.2/Iterable#hashCode()"}},"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","doc":{"synopsis":"<p>Returns the value associated with the provided key, or notSetValue if\nthe Iterable does not contain this key.</p>\n","description":"<p>Note: it is possible a key may be associated with an <code><span class=\"token primitive\" >undefined</span></code> value,\nso if <code><span class=\"t param\">notSetValue</span></code> is not provided and this method returns <code><span class=\"token primitive\" >undefined</span></code>,\nthat does not guarantee the key was not found.</p>\n","notes":[]},"signatures":[{"line":1749,"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"notSetValue","type":{"k":11,"param":"V"},"optional":true}],"type":{"k":11,"param":"V"}}],"url":"/docs/v3.8.2/Seq#get()","inherited":{"interface":"Iterable","label":"get()","url":"/docs/v3.8.2/Iterable#get()"}},"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","doc":{"synopsis":"<p>True if a key exists within this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>, using <code><a href=\"/docs/v3.8.2/is()\">Immutable.is</a></code> to determine equality</p>\n","description":"","notes":[]},"signatures":[{"line":1754,"params":[{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#has()","inherited":{"interface":"Iterable","label":"has()","url":"/docs/v3.8.2/Iterable#has()"}},"includes":{"name":"includes","label":"includes()","id":"includes()","group":"Reading values","doc":{"synopsis":"<p>True if a value exists within this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>, using <code><a href=\"/docs/v3.8.2/is()\">Immutable.is</a></code> to determine equality</p>\n","description":"","notes":[{"name":"alias","body":"contains"}]},"signatures":[{"line":1760,"params":[{"name":"value","type":{"k":11,"param":"V"}}],"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#includes()","inherited":{"interface":"Iterable","label":"includes()","url":"/docs/v3.8.2/Iterable#includes()"}},"first":{"name":"first","label":"first()","id":"first()","group":"Reading values","doc":{"synopsis":"<p>The first value in the Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":1766,"type":{"k":11,"param":"V"}}],"url":"/docs/v3.8.2/Seq#first()","inherited":{"interface":"Iterable","label":"first()","url":"/docs/v3.8.2/Iterable#first()"}},"last":{"name":"last","label":"last()","id":"last()","group":"Reading values","doc":{"synopsis":"<p>The last value in the Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":1771,"type":{"k":11,"param":"V"}}],"url":"/docs/v3.8.2/Seq#last()","inherited":{"interface":"Iterable","label":"last()","url":"/docs/v3.8.2/Iterable#last()"}},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","signatures":[{"line":1780,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Array","args":[{"k":1}]}},{"name":"notSetValue","type":{"k":1},"optional":true}],"type":{"k":1}},{"line":1781,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}],"url":"/docs/v3.8.2/Iterable"}},{"name":"notSetValue","type":{"k":1},"optional":true}],"type":{"k":1}}],"url":"/docs/v3.8.2/Seq#getIn()","inherited":{"interface":"Iterable","label":"getIn()","url":"/docs/v3.8.2/Iterable#getIn()"}},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","signatures":[{"line":1787,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Array","args":[{"k":1}]}}],"type":{"k":5}},{"line":1788,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}],"url":"/docs/v3.8.2/Iterable"}}],"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#hasIn()","inherited":{"interface":"Iterable","label":"hasIn()","url":"/docs/v3.8.2/Iterable#hasIn()"}},"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Iterable to equivalent JS.</p>\n","description":"<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Indexeds\" target=\"_blank\" rel=\"noopener\">Iterable.Indexeds</a></code>, and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Sets\" target=\"_blank\" rel=\"noopener\">Iterable.Sets</a></code> become Arrays, while\n<code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Keyeds\" target=\"_blank\" rel=\"noopener\">Iterable.Keyeds</a></code> become Objects.</p>\n","notes":[{"name":"alias","body":"toJSON"}]},"signatures":[{"line":1801,"type":{"k":1}}],"url":"/docs/v3.8.2/Seq#toJS()","inherited":{"interface":"Iterable","label":"toJS()","url":"/docs/v3.8.2/Iterable#toJS()"}},"toArray":{"name":"toArray","label":"toArray()","id":"toArray()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this iterable to an Array, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":1806,"type":{"k":12,"name":"Array","args":[{"k":11,"param":"V"}]}}],"url":"/docs/v3.8.2/Seq#toArray()","inherited":{"interface":"Iterable","label":"toArray()","url":"/docs/v3.8.2/Iterable#toArray()"}},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Iterable to an Object.</p>\n","description":"<p>Throws if keys are not strings.</p>\n","notes":[]},"signatures":[{"line":1813,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}}],"url":"/docs/v3.8.2/Seq#toObject()","inherited":{"interface":"Iterable","label":"toObject()","url":"/docs/v3.8.2/Iterable#toObject()"}},"toMap":{"name":"toMap","label":"toMap()","id":"toMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":1824,"type":{"k":12,"name":"Map","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Map"}}],"url":"/docs/v3.8.2/Seq#toMap()","inherited":{"interface":"Iterable","label":"toMap()","url":"/docs/v3.8.2/Iterable#toMap()"}},"toOrderedMap":{"name":"toOrderedMap","label":"toOrderedMap()","id":"toOrderedMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":1832,"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/OrderedMap"}}],"url":"/docs/v3.8.2/Seq#toOrderedMap()","inherited":{"interface":"Iterable","label":"toOrderedMap()","url":"/docs/v3.8.2/Iterable#toOrderedMap()"}},"toSet":{"name":"toSet","label":"toSet()","id":"toSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v3.8.2/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":1841,"type":{"k":12,"name":"Set","args":[{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Set"}}],"url":"/docs/v3.8.2/Seq#toSet()","inherited":{"interface":"Iterable","label":"toSet()","url":"/docs/v3.8.2/Iterable#toSet()"}},"toOrderedSet":{"name":"toOrderedSet","label":"toOrderedSet()","id":"toOrderedSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":1850,"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"V"}],"url":"/docs/v3.8.2/OrderedSet"}}],"url":"/docs/v3.8.2/Seq#toOrderedSet()","inherited":{"interface":"Iterable","label":"toOrderedSet()","url":"/docs/v3.8.2/Iterable#toOrderedSet()"}},"toList":{"name":"toList","label":"toList()","id":"toList()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a List, discarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v3.8.2/List\">List(this)</a></code>, but provided to allow\nfor chained expressions.</p>\n","notes":[]},"signatures":[{"line":1858,"type":{"k":12,"name":"List","args":[{"k":11,"param":"V"}],"url":"/docs/v3.8.2/List"}}],"url":"/docs/v3.8.2/Seq#toList()","inherited":{"interface":"Iterable","label":"toList()","url":"/docs/v3.8.2/Iterable#toList()"}},"toStack":{"name":"toStack","label":"toStack()","id":"toStack()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v3.8.2/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":1867,"type":{"k":12,"name":"Stack","args":[{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Stack"}}],"url":"/docs/v3.8.2/Seq#toStack()","inherited":{"interface":"Iterable","label":"toStack()","url":"/docs/v3.8.2/Iterable#toStack()"}},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Converts this Iterable to a Seq of the same kind (indexed,\nkeyed, or set).</p>\n","description":"","notes":[]},"signatures":[{"line":1876,"type":{"k":12,"name":"Seq","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq"}}],"url":"/docs/v3.8.2/Seq#toSeq()","inherited":{"interface":"Iterable","label":"toSeq()","url":"/docs/v3.8.2/Iterable#toSeq()"}},"toKeyedSeq":{"name":"toKeyedSeq","label":"toKeyedSeq()","id":"toKeyedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Keyed from this Iterable where indices are treated as keys.</p>\n","description":"<p>This is useful if you want to operate on an\nIterable.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Iterable.</p>\n<p>Example:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nindexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>toString<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// Seq [ 'B' ]\n</span><span class=\"token keyword\" >var</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nkeyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>toString<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// Seq { 1: 'B' }</span></code>","notes":[]},"signatures":[{"line":1895,"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq.Keyed"}}],"url":"/docs/v3.8.2/Seq#toKeyedSeq()","inherited":{"interface":"Iterable","label":"toKeyedSeq()","url":"/docs/v3.8.2/Iterable#toKeyedSeq()"}},"toIndexedSeq":{"name":"toIndexedSeq","label":"toIndexedSeq()","id":"toIndexedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Iterable, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":1900,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq.Indexed"}}],"url":"/docs/v3.8.2/Seq#toIndexedSeq()","inherited":{"interface":"Iterable","label":"toIndexedSeq()","url":"/docs/v3.8.2/Iterable#toIndexedSeq()"}},"toSetSeq":{"name":"toSetSeq","label":"toSetSeq()","id":"toSetSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Set of the values of this Iterable, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":1905,"type":{"k":12,"name":"Seq.Set","args":[{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq.Set"}}],"url":"/docs/v3.8.2/Seq#toSetSeq()","inherited":{"interface":"Iterable","label":"toSetSeq()","url":"/docs/v3.8.2/Iterable#toSetSeq()"}},"keys":{"name":"keys","label":"keys()","id":"keys()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>&#39;s keys.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support Immutable JS sequence algorithms. Use <code><a href=\"/docs/v3.8.2/List#keySeq()\">keySeq</a></code> instead, if this is what you want.</p>\n","notes":[]},"signatures":[{"line":1915,"type":{"k":12,"name":"Iterator","args":[{"k":11,"param":"K"}]}}],"url":"/docs/v3.8.2/Seq#keys()","inherited":{"interface":"Iterable","label":"keys()","url":"/docs/v3.8.2/Iterable#keys()"}},"values":{"name":"values","label":"values()","id":"values()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>&#39;s values.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support Immutable JS sequence algorithms. Use <code><a href=\"/docs/v3.8.2/List#valueSeq()\">valueSeq</a></code> instead, if this is what you want.</p>\n","notes":[]},"signatures":[{"line":1922,"type":{"k":12,"name":"Iterator","args":[{"k":11,"param":"V"}]}}],"url":"/docs/v3.8.2/Seq#values()","inherited":{"interface":"Iterable","label":"values()","url":"/docs/v3.8.2/Iterable#values()"}},"entries":{"name":"entries","label":"entries()","id":"entries()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >]</span></code> tuples.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support Immutable JS sequence algorithms. Use <code><a href=\"/docs/v3.8.2/List#entrySeq()\">entrySeq</a></code> instead, if this is what you want.</p>\n","notes":[]},"signatures":[{"line":1929,"type":{"k":12,"name":"Iterator","args":[{"k":12,"name":"Array","args":[{"k":1}]}]}}],"url":"/docs/v3.8.2/Seq#entries()","inherited":{"interface":"Iterable","label":"entries()","url":"/docs/v3.8.2/Iterable#entries()"}},"keySeq":{"name":"keySeq","label":"keySeq()","id":"keySeq()","group":"Iterables (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of the keys of this Iterable,\ndiscarding values.</p>\n","description":"","notes":[]},"signatures":[{"line":1938,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"K"}],"url":"/docs/v3.8.2/Seq.Indexed"}}],"url":"/docs/v3.8.2/Seq#keySeq()","inherited":{"interface":"Iterable","label":"keySeq()","url":"/docs/v3.8.2/Iterable#keySeq()"}},"valueSeq":{"name":"valueSeq","label":"valueSeq()","id":"valueSeq()","group":"Iterables (Seq)","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Iterable, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":1943,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Seq.Indexed"}}],"url":"/docs/v3.8.2/Seq#valueSeq()","inherited":{"interface":"Iterable","label":"valueSeq()","url":"/docs/v3.8.2/Iterable#valueSeq()"}},"entrySeq":{"name":"entrySeq","label":"entrySeq()","id":"entrySeq()","group":"Iterables (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n","description":"","notes":[]},"signatures":[{"line":1948,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":12,"name":"Array","args":[{"k":1}]}],"url":"/docs/v3.8.2/Seq.Indexed"}}],"url":"/docs/v3.8.2/Seq#entrySeq()","inherited":{"interface":"Iterable","label":"entrySeq()","url":"/docs/v3.8.2/Iterable#entrySeq()"}},"map":{"name":"map","label":"map()","id":"map()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { a: 10, b: 20 }</span></code></p>\n","notes":[]},"signatures":[{"line":1961,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"M"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#map()","inherited":{"interface":"Iterable","label":"map()","url":"/docs/v3.8.2/Iterable#map()"}},"filter":{"name":"filter","label":"filter()","id":"filter()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns true.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span>c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span>d<span class=\"token punctuation\" >:</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { b: 2, d: 4 }</span></code></p>\n","notes":[]},"signatures":[{"line":1974,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#filter()","inherited":{"interface":"Iterable","label":"filter()","url":"/docs/v3.8.2/Iterable#filter()"}},"filterNot":{"name":"filterNot","label":"filterNot()","id":"filterNot()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span>c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span>d<span class=\"token punctuation\" >:</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { a: 1, c: 3 }</span></code></p>\n","notes":[]},"signatures":[{"line":1987,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#filterNot()","inherited":{"interface":"Iterable","label":"filterNot()","url":"/docs/v3.8.2/Iterable#filterNot()"}},"reverse":{"name":"reverse","label":"reverse()","id":"reverse()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type in reverse order.</p>\n","description":"","notes":[]},"signatures":[{"line":1995,"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#reverse()","inherited":{"interface":"Iterable","label":"reverse()","url":"/docs/v3.8.2/Iterable#reverse()"}},"sort":{"name":"sort","label":"sort()","id":"sort()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n","description":"<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n","notes":[]},"signatures":[{"line":2014,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"V"}},{"name":"valueB","type":{"k":11,"param":"V"}}],"type":{"k":6}},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#sort()","inherited":{"interface":"Iterable","label":"sort()","url":"/docs/v3.8.2/Iterable#sort()"}},"sortBy":{"name":"sortBy","label":"sortBy()","id":"sortBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v3.8.2/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code></p>\n","notes":[]},"signatures":[{"line":2023,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#sortBy()","inherited":{"interface":"Iterable","label":"sortBy()","url":"/docs/v3.8.2/Iterable#sortBy()"}},"groupBy":{"name":"groupBy","label":"groupBy()","id":"groupBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Keyed\" target=\"_blank\" rel=\"noopener\">Iterable.Keyed</a></code> of <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Keyeds\" target=\"_blank\" rel=\"noopener\">Iterable.Keyeds</a></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is always an eager operation.</p>\n","notes":[]},"signatures":[{"line":2034,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"G"},{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}],"url":"/docs/v3.8.2/Seq.Keyed"}}],"url":"/docs/v3.8.2/Seq#groupBy()","inherited":{"interface":"Iterable","label":"groupBy()","url":"/docs/v3.8.2/Iterable#groupBy()"}},"forEach":{"name":"forEach","label":"forEach()","id":"forEach()","group":"Side effects","doc":{"synopsis":"<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Iterable.</p>\n","description":"<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n","notes":[]},"signatures":[{"line":2049,"params":[{"name":"sideEffect","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":1}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v3.8.2/Seq#forEach()","inherited":{"interface":"Iterable","label":"forEach()","url":"/docs/v3.8.2/Iterable#forEach()"}},"slice":{"name":"slice","label":"slice()","id":"slice()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type representing a portion of this\nIterable from start up to but not including end.</p>\n","description":"<p>If begin is negative, it is offset from the end of the Iterable. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Iterable of the last two entries. If it is not\nprovided the new Iterable will begin at the beginning of this Iterable.</p>\n<p>If end is negative, it is offset from the end of the Iterable. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns an Iterable of everything but the last entry. If\nit is not provided, the new Iterable will continue through the end of\nthis Iterable.</p>\n<p>If the requested slice is equivalent to the current Iterable, then it\nwill return itself.</p>\n","notes":[]},"signatures":[{"line":2073,"params":[{"name":"begin","type":{"k":6},"optional":true},{"name":"end","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#slice()","inherited":{"interface":"Iterable","label":"slice()","url":"/docs/v3.8.2/Iterable#slice()"}},"rest":{"name":"rest","label":"rest()","id":"rest()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type containing all entries except\nthe first.</p>\n","description":"","notes":[]},"signatures":[{"line":2079,"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#rest()","inherited":{"interface":"Iterable","label":"rest()","url":"/docs/v3.8.2/Iterable#rest()"}},"butLast":{"name":"butLast","label":"butLast()","id":"butLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type containing all entries except\nthe last.</p>\n","description":"","notes":[]},"signatures":[{"line":2085,"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#butLast()","inherited":{"interface":"Iterable","label":"butLast()","url":"/docs/v3.8.2/Iterable#butLast()"}},"skip":{"name":"skip","label":"skip()","id":"skip()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2091,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#skip()","inherited":{"interface":"Iterable","label":"skip()","url":"/docs/v3.8.2/Iterable#skip()"}},"skipLast":{"name":"skipLast","label":"skipLast()","id":"skipLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2097,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#skipLast()","inherited":{"interface":"Iterable","label":"skipLast()","url":"/docs/v3.8.2/Iterable#skipLast()"}},"skipWhile":{"name":"skipWhile","label":"skipWhile()","id":"skipWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 'cat', 'hat', 'god' ]</span></code></p>\n","notes":[]},"signatures":[{"line":2108,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#skipWhile()","inherited":{"interface":"Iterable","label":"skipWhile()","url":"/docs/v3.8.2/Iterable#skipWhile()"}},"skipUntil":{"name":"skipUntil","label":"skipUntil()","id":"skipUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 'hat', 'god' ]</span></code></p>\n","notes":[]},"signatures":[{"line":2122,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#skipUntil()","inherited":{"interface":"Iterable","label":"skipUntil()","url":"/docs/v3.8.2/Iterable#skipUntil()"}},"take":{"name":"take","label":"take()","id":"take()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2131,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#take()","inherited":{"interface":"Iterable","label":"take()","url":"/docs/v3.8.2/Iterable#take()"}},"takeLast":{"name":"takeLast","label":"takeLast()","id":"takeLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2137,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#takeLast()","inherited":{"interface":"Iterable","label":"takeLast()","url":"/docs/v3.8.2/Iterable#takeLast()"}},"takeWhile":{"name":"takeWhile","label":"takeWhile()","id":"takeWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes entries from this\nIterable as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 'dog', 'frog' ]</span></code></p>\n","notes":[]},"signatures":[{"line":2148,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#takeWhile()","inherited":{"interface":"Iterable","label":"takeWhile()","url":"/docs/v3.8.2/Iterable#takeWhile()"}},"takeUntil":{"name":"takeUntil","label":"takeUntil()","id":"takeUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes entries from this\nIterable as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span>of<span class=\"token punctuation\" >(</span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// ['dog', 'frog']</span></code></p>\n","notes":[]},"signatures":[{"line":2161,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#takeUntil()","inherited":{"interface":"Iterable","label":"takeUntil()","url":"/docs/v3.8.2/Iterable#takeUntil()"}},"concat":{"name":"concat","label":"concat()","id":"concat()","group":"Combination","doc":{"synopsis":"<p>Returns a new Iterable of the same type with other values and\niterable-like concatenated to this one.</p>\n","description":"<p>For Seqs, all entries will be present in\nthe resulting iterable, even if they have the same key.</p>\n","notes":[]},"signatures":[{"line":2176,"params":[{"name":"valuesOrIterables","type":{"k":9,"type":{"k":1}},"varArgs":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#concat()","inherited":{"interface":"Iterable","label":"concat()","url":"/docs/v3.8.2/Iterable#concat()"}},"flatten":{"name":"flatten","label":"flatten()","id":"flatten()","group":"Combination","signatures":[{"line":2191,"params":[{"name":"depth","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}],"url":"/docs/v3.8.2/Iterable"}},{"line":2192,"params":[{"name":"shallow","type":{"k":5},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#flatten()","inherited":{"interface":"Iterable","label":"flatten()","url":"/docs/v3.8.2/Iterable#flatten()"}},"flatMap":{"name":"flatMap","label":"flatMap()","id":"flatMap()","group":"Combination","signatures":[{"line":2199,"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"MK"},{"k":11,"param":"MV"}]}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"MK"},{"k":11,"param":"MV"}],"url":"/docs/v3.8.2/Iterable"}},{"line":2203,"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":1}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"MK"},{"k":11,"param":"MV"}],"url":"/docs/v3.8.2/Iterable"}}],"url":"/docs/v3.8.2/Seq#flatMap()","inherited":{"interface":"Iterable","label":"flatMap()","url":"/docs/v3.8.2/Iterable#flatMap()"}},"reduce":{"name":"reduce","label":"reduce()","id":"reduce()","group":"Reducing a value","doc":{"synopsis":"<p>Reduces the Iterable to a value by calling the <code><span class=\"t param\">reducer</span></code> for every entry\nin the Iterable and passing along the reduced value.</p>\n","description":"<p>If <code><span class=\"t param\">initialReduction</span></code> is not provided, or is null, the first item in the\nIterable will be used.</p>\n","notes":[{"name":"see","body":"<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"noopener\">Array#reduce</a></code>.</p>\n"}]},"signatures":[{"line":2220,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"},"optional":true},{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"},"optional":true},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"R"}}],"url":"/docs/v3.8.2/Seq#reduce()","inherited":{"interface":"Iterable","label":"reduce()","url":"/docs/v3.8.2/Iterable#reduce()"}},"reduceRight":{"name":"reduceRight","label":"reduceRight()","id":"reduceRight()","group":"Reducing a value","doc":{"synopsis":"<p>Reduces the Iterable in reverse (from the right side).</p>\n","description":"<p>Note: Similar to this.reverse().reduce(), and provided for parity\nwith <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\" target=\"_blank\" rel=\"noopener\">Array#reduceRight</a></code>.</p>\n","notes":[]},"signatures":[{"line":2232,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"},"optional":true},{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"},"optional":true},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"R"}}],"url":"/docs/v3.8.2/Seq#reduceRight()","inherited":{"interface":"Iterable","label":"reduceRight()","url":"/docs/v3.8.2/Iterable#reduceRight()"}},"every":{"name":"every","label":"every()","id":"every()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2241,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#every()","inherited":{"interface":"Iterable","label":"every()","url":"/docs/v3.8.2/Iterable#every()"}},"some":{"name":"some","label":"some()","id":"some()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2249,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#some()","inherited":{"interface":"Iterable","label":"some()","url":"/docs/v3.8.2/Iterable#some()"}},"join":{"name":"join","label":"join()","id":"join()","group":"Reducing a value","doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":2258,"params":[{"name":"separator","type":{"k":7},"optional":true}],"type":{"k":7}}],"url":"/docs/v3.8.2/Seq#join()","inherited":{"interface":"Iterable","label":"join()","url":"/docs/v3.8.2/Iterable#join()"}},"isEmpty":{"name":"isEmpty","label":"isEmpty()","id":"isEmpty()","group":"Reducing a value","doc":{"synopsis":"<p>Returns true if this Iterable includes no values.</p>\n","description":"<p>For some lazy <code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code>, <code><a href=\"/docs/v3.8.2/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n","notes":[]},"signatures":[{"line":2266,"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#isEmpty()","inherited":{"interface":"Iterable","label":"isEmpty()","url":"/docs/v3.8.2/Iterable#isEmpty()"}},"count":{"name":"count","label":"count()","id":"count()","group":"Reducing a value","signatures":[{"line":2278,"type":{"k":6}},{"line":2279,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v3.8.2/Seq#count()","inherited":{"interface":"Iterable","label":"count()","url":"/docs/v3.8.2/Iterable#count()"}},"countBy":{"name":"countBy","label":"countBy()","id":"countBy()","group":"Reducing a value","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v3.8.2/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n","notes":[]},"signatures":[{"line":2290,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":6}],"url":"/docs/v3.8.2/Map"}}],"url":"/docs/v3.8.2/Seq#countBy()","inherited":{"interface":"Iterable","label":"countBy()","url":"/docs/v3.8.2/Iterable#countBy()"}},"find":{"name":"find","label":"find()","id":"find()","group":"Search for value","doc":{"synopsis":"<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":2301,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"V"},"optional":true}],"type":{"k":11,"param":"V"}}],"url":"/docs/v3.8.2/Seq#find()","inherited":{"interface":"Iterable","label":"find()","url":"/docs/v3.8.2/Iterable#find()"}},"findLast":{"name":"findLast","label":"findLast()","id":"findLast()","group":"Search for value","doc":{"synopsis":"<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":2312,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"V"},"optional":true}],"type":{"k":11,"param":"V"}}],"url":"/docs/v3.8.2/Seq#findLast()","inherited":{"interface":"Iterable","label":"findLast()","url":"/docs/v3.8.2/Iterable#findLast()"}},"findEntry":{"name":"findEntry","label":"findEntry()","id":"findEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":2321,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"V"},"optional":true}],"type":{"k":12,"name":"Array","args":[{"k":1}]}}],"url":"/docs/v3.8.2/Seq#findEntry()","inherited":{"interface":"Iterable","label":"findEntry()","url":"/docs/v3.8.2/Iterable#findEntry()"}},"findLastEntry":{"name":"findLastEntry","label":"findLastEntry()","id":"findLastEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":2333,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"V"},"optional":true}],"type":{"k":12,"name":"Array","args":[{"k":1}]}}],"url":"/docs/v3.8.2/Seq#findLastEntry()","inherited":{"interface":"Iterable","label":"findLastEntry()","url":"/docs/v3.8.2/Iterable#findLastEntry()"}},"findKey":{"name":"findKey","label":"findKey()","id":"findKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":2342,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"K"}}],"url":"/docs/v3.8.2/Seq#findKey()","inherited":{"interface":"Iterable","label":"findKey()","url":"/docs/v3.8.2/Iterable#findKey()"}},"findLastKey":{"name":"findLastKey","label":"findLastKey()","id":"findLastKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":2352,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"K"}}],"url":"/docs/v3.8.2/Seq#findLastKey()","inherited":{"interface":"Iterable","label":"findLastKey()","url":"/docs/v3.8.2/Iterable#findLastKey()"}},"keyOf":{"name":"keyOf","label":"keyOf()","id":"keyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":2360,"params":[{"name":"searchValue","type":{"k":11,"param":"V"}}],"type":{"k":11,"param":"K"}}],"url":"/docs/v3.8.2/Seq#keyOf()","inherited":{"interface":"Iterable","label":"keyOf()","url":"/docs/v3.8.2/Iterable#keyOf()"}},"lastKeyOf":{"name":"lastKeyOf","label":"lastKeyOf()","id":"lastKeyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":2365,"params":[{"name":"searchValue","type":{"k":11,"param":"V"}}],"type":{"k":11,"param":"K"}}],"url":"/docs/v3.8.2/Seq#lastKeyOf()","inherited":{"interface":"Iterable","label":"lastKeyOf()","url":"/docs/v3.8.2/Iterable#lastKeyOf()"}},"max":{"name":"max","label":"max()","id":"max()","group":"Search for value","doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/sort\" target=\"_blank\" rel=\"noopener\">Iterable#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v3.8.2/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":2382,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"V"}},{"name":"valueB","type":{"k":11,"param":"V"}}],"type":{"k":6}},"optional":true}],"type":{"k":11,"param":"V"}}],"url":"/docs/v3.8.2/Seq#max()","inherited":{"interface":"Iterable","label":"max()","url":"/docs/v3.8.2/Iterable#max()"}},"maxBy":{"name":"maxBy","label":"maxBy()","id":"maxBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v3.8.2/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code></p>\n","notes":[]},"signatures":[{"line":2391,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":11,"param":"V"}}],"url":"/docs/v3.8.2/Seq#maxBy()","inherited":{"interface":"Iterable","label":"maxBy()","url":"/docs/v3.8.2/Iterable#maxBy()"}},"min":{"name":"min","label":"min()","id":"min()","group":"Search for value","doc":{"synopsis":"<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/sort\" target=\"_blank\" rel=\"noopener\">Iterable#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v3.8.2/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":2411,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"V"}},{"name":"valueB","type":{"k":11,"param":"V"}}],"type":{"k":6}},"optional":true}],"type":{"k":11,"param":"V"}}],"url":"/docs/v3.8.2/Seq#min()","inherited":{"interface":"Iterable","label":"min()","url":"/docs/v3.8.2/Iterable#min()"}},"minBy":{"name":"minBy","label":"minBy()","id":"minBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v3.8.2/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code></p>\n","notes":[]},"signatures":[{"line":2420,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"},"optional":true},{"name":"key","type":{"k":11,"param":"K"},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},"optional":true}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":11,"param":"V"}}],"url":"/docs/v3.8.2/Seq#minBy()","inherited":{"interface":"Iterable","label":"minBy()","url":"/docs/v3.8.2/Iterable#minBy()"}},"isSubset":{"name":"isSubset","label":"isSubset()","id":"isSubset()","group":"Comparison","signatures":[{"line":2431,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"type":{"k":5}},{"line":2432,"params":[{"name":"iter","type":{"k":12,"name":"Array","args":[{"k":11,"param":"V"}]}}],"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#isSubset()","inherited":{"interface":"Iterable","label":"isSubset()","url":"/docs/v3.8.2/Iterable#isSubset()"}},"isSuperset":{"name":"isSuperset","label":"isSuperset()","id":"isSuperset()","group":"Comparison","signatures":[{"line":2437,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}}],"type":{"k":5}},{"line":2438,"params":[{"name":"iter","type":{"k":12,"name":"Array","args":[{"k":11,"param":"V"}]}}],"type":{"k":5}}],"url":"/docs/v3.8.2/Seq#isSuperset()","inherited":{"interface":"Iterable","label":"isSuperset()","url":"/docs/v3.8.2/Iterable#isSuperset()"}}},"line":1322,"typeParams":["K","V"],"extends":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.2/Iterable"}]},"label":"Seq","url":"/docs/v3.8.2/Seq"},"sidebarLinks":[{"label":"fromJS()","url":"/docs/v3.8.2/fromJS()"},{"label":"is()","url":"/docs/v3.8.2/is()"},{"label":"List","url":"/docs/v3.8.2/List"},{"label":"Map","url":"/docs/v3.8.2/Map"},{"label":"OrderedMap","url":"/docs/v3.8.2/OrderedMap"},{"label":"Set","url":"/docs/v3.8.2/Set"},{"label":"OrderedSet","url":"/docs/v3.8.2/OrderedSet"},{"label":"Stack","url":"/docs/v3.8.2/Stack"},{"label":"Range()","url":"/docs/v3.8.2/Range()"},{"label":"Repeat()","url":"/docs/v3.8.2/Repeat()"},{"label":"Record()","url":"/docs/v3.8.2/Record()"},{"label":"Record.Class","url":"/docs/v3.8.2/Record.Class"},{"label":"Seq","url":"/docs/v3.8.2/Seq"},{"label":"Seq.Keyed","url":"/docs/v3.8.2/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v3.8.2/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v3.8.2/Seq.Set"},{"label":"Iterable","url":"/docs/v3.8.2/Iterable"},{"label":"Iterable.Keyed","url":"/docs/v3.8.2/Iterable.Keyed"},{"label":"Iterable.Indexed","url":"/docs/v3.8.2/Iterable.Indexed"},{"label":"Iterable.Set","url":"/docs/v3.8.2/Iterable.Set"},{"label":"Collection","url":"/docs/v3.8.2/Collection"},{"label":"Collection.Keyed","url":"/docs/v3.8.2/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v3.8.2/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v3.8.2/Collection.Set"}]},"__N_SSG":true}