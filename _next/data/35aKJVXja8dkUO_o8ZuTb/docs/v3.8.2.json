{"pageProps":{"versions":["v4.0.0-rc.12","v3.8.2","latest@main"],"version":"v3.8.2","overviewData":{"doc":{"synopsis":"<p>Immutable data encourages pure functions (data-in, data-out) and lends itself\nto much simpler application development and enabling techniques from\nfunctional programming such as lazy evaluation.</p>\n","description":"<p>While designed to bring these powerful functional concepts to JavaScript, it\npresents an Object-Oriented API familiar to Javascript engineers and closely\nmirroring that of Array, Map, and Set. It is easy and efficient to convert to\nand from plain Javascript types.</p>\n<p>Note: all examples are presented in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\">ES6</a>. To run in all browsers, they\nneed to be translated to ES3. For example:</p>\n<code class=\"codeBlock\"><span class=\"token comment\" spellcheck=\"true\">// ES6\n</span>foo<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ES3\n</span>foo<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>x<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>","notes":[]},"api":[{"label":"fromJS()","url":"/docs/v3.8.2/fromJS()","synopsis":"<p>Deeply converts plain JS objects and arrays to Immutable Maps and Lists.</p>\n"},{"label":"is()","url":"/docs/v3.8.2/is()","synopsis":"<p>Value equality check with semantics similar to <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"noopener\">Object.is</a></code>, but treats\nImmutable <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>s as values, equal if the second <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code> includes\nequivalent values.</p>\n"},{"label":"List","url":"/docs/v3.8.2/List","synopsis":"<p>Lists are ordered indexed dense collections, much like a JavaScript\nArray.</p>\n"},{"label":"Map","url":"/docs/v3.8.2/Map","synopsis":"<p>Immutable Map is an unordered Iterable.Keyed of (key, value) pairs with\n<code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> gets and <code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> persistent sets.</p>\n"},{"label":"OrderedMap","url":"/docs/v3.8.2/OrderedMap","synopsis":"<p>A type of Map that has the additional guarantee that the iteration order of\nentries will be the order in which they were set().</p>\n"},{"label":"Set","url":"/docs/v3.8.2/Set","synopsis":"<p>A Collection of unique values with <code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> adds and has.</p>\n"},{"label":"OrderedSet","url":"/docs/v3.8.2/OrderedSet","synopsis":"<p>A type of Set that has the additional guarantee that the iteration order of\nvalues will be the order in which they were <code><a href=\"/docs/v3.8.2/OrderedSet#add()\">add</a></code>ed.</p>\n"},{"label":"Stack","url":"/docs/v3.8.2/Stack","synopsis":"<p>Stacks are indexed collections which support very efficient O(1) addition\nand removal from the front using <code><a href=\"/docs/v3.8.2/Stack#unshift()\">unshift(v)</a></code> and <code><a href=\"/docs/v3.8.2/Stack#shift()\">shift()</a></code>.</p>\n"},{"label":"Range()","url":"/docs/v3.8.2/Range()","synopsis":"<p>Returns a Seq.Indexed of numbers from <code><span class=\"t param\">start</span></code> (inclusive) to <code><span class=\"t param\">end</span></code>\n(exclusive), by <code><span class=\"t param\">step</span></code>, where <code><span class=\"t param\">start</span></code> defaults to 0, <code><span class=\"t param\">step</span></code> to 1, and <code><span class=\"t param\">end</span></code> to\ninfinity. When <code><span class=\"t param\">start</span></code> is equal to <code><span class=\"t param\">end</span></code>, returns empty range.</p>\n"},{"label":"Repeat()","url":"/docs/v3.8.2/Repeat()","synopsis":"<p>Returns a Seq.Indexed of <code><span class=\"t param\">value</span></code> repeated <code><span class=\"t param\">times</span></code> times. When <code><span class=\"t param\">times</span></code> is\nnot defined, returns an infinite <code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code> of <code><span class=\"t param\">value</span></code>.</p>\n"},{"label":"Record()","url":"/docs/v3.8.2/Record()","synopsis":"<p>Creates a new Class which produces Record instances. A record is similar to\na JS object, but enforce a specific set of allowed string keys, and have\ndefault values.</p>\n"},{"label":"Record.Class","url":"/docs/v3.8.2/Record.Class"},{"label":"Seq","url":"/docs/v3.8.2/Seq","synopsis":"<p>Represents a sequence of values, but may not be backed by a concrete data\nstructure.</p>\n"},{"label":"Seq.Keyed","url":"/docs/v3.8.2/Seq.Keyed","synopsis":"<p><code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code> which represents key-value pairs.</p>\n"},{"label":"Seq.Indexed","url":"/docs/v3.8.2/Seq.Indexed","synopsis":"<p><code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code> which represents an ordered indexed list of values.</p>\n"},{"label":"Seq.Set","url":"/docs/v3.8.2/Seq.Set","synopsis":"<p><code><a href=\"/docs/v3.8.2/Seq\">Seq</a></code> which represents a set of values.</p>\n"},{"label":"Iterable","url":"/docs/v3.8.2/Iterable","synopsis":"<p>The <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code> is a set of (key, value) entries which can be iterated, and\nis the base class for all collections in <code>immutable</code>, allowing them to\nmake use of all the Iterable methods (such as <code><a href=\"/docs/v3.8.2/Iterable#map()\">map</a></code> and <code><a href=\"/docs/v3.8.2/Iterable#filter()\">filter</a></code>).</p>\n"},{"label":"Iterable.Keyed","url":"/docs/v3.8.2/Iterable.Keyed","synopsis":"<p>Keyed Iterables have discrete keys tied to each value.</p>\n"},{"label":"Iterable.Indexed","url":"/docs/v3.8.2/Iterable.Indexed","synopsis":"<p>Indexed Iterables have incrementing numeric keys. They exhibit\nslightly different behavior than <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Keyed\" target=\"_blank\" rel=\"noopener\">Iterable.Keyed</a></code> for some methods in order\nto better mirror the behavior of JavaScript&#39;s <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>, and add methods\nwhich do not make sense on non-indexed Iterables such as <code><a href=\"/docs/v3.8.2/Iterable.Indexed#indexOf()\">indexOf</a></code>.</p>\n"},{"label":"Iterable.Set","url":"/docs/v3.8.2/Iterable.Set","synopsis":"<p>Set Iterables only represent values. They have no associated keys or\nindices. Duplicate values are possible in Seq.Sets, however the\nconcrete <code><a href=\"/docs/v3.8.2/Set\">Set</a></code> does not allow duplicate values.</p>\n"},{"label":"Collection","url":"/docs/v3.8.2/Collection","synopsis":"<p>Collection is the abstract base class for concrete data structures. It\ncannot be constructed directly.</p>\n"},{"label":"Collection.Keyed","url":"/docs/v3.8.2/Collection.Keyed","synopsis":"<p><code><a href=\"/docs/v3.8.2/Collection\">Collection</a></code> which represents key-value pairs.</p>\n"},{"label":"Collection.Indexed","url":"/docs/v3.8.2/Collection.Indexed","synopsis":"<p><code><a href=\"/docs/v3.8.2/Collection\">Collection</a></code> which represents ordered indexed values.</p>\n"},{"label":"Collection.Set","url":"/docs/v3.8.2/Collection.Set","synopsis":"<p><code><a href=\"/docs/v3.8.2/Collection\">Collection</a></code> which represents values, unassociated with keys or indices.</p>\n"}]},"sidebarLinks":[{"label":"fromJS()","url":"/docs/v3.8.2/fromJS()"},{"label":"is()","url":"/docs/v3.8.2/is()"},{"label":"List","url":"/docs/v3.8.2/List"},{"label":"Map","url":"/docs/v3.8.2/Map"},{"label":"OrderedMap","url":"/docs/v3.8.2/OrderedMap"},{"label":"Set","url":"/docs/v3.8.2/Set"},{"label":"OrderedSet","url":"/docs/v3.8.2/OrderedSet"},{"label":"Stack","url":"/docs/v3.8.2/Stack"},{"label":"Range()","url":"/docs/v3.8.2/Range()"},{"label":"Repeat()","url":"/docs/v3.8.2/Repeat()"},{"label":"Record()","url":"/docs/v3.8.2/Record()"},{"label":"Record.Class","url":"/docs/v3.8.2/Record.Class"},{"label":"Seq","url":"/docs/v3.8.2/Seq"},{"label":"Seq.Keyed","url":"/docs/v3.8.2/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v3.8.2/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v3.8.2/Seq.Set"},{"label":"Iterable","url":"/docs/v3.8.2/Iterable"},{"label":"Iterable.Keyed","url":"/docs/v3.8.2/Iterable.Keyed"},{"label":"Iterable.Indexed","url":"/docs/v3.8.2/Iterable.Indexed"},{"label":"Iterable.Set","url":"/docs/v3.8.2/Iterable.Set"},{"label":"Collection","url":"/docs/v3.8.2/Collection"},{"label":"Collection.Keyed","url":"/docs/v3.8.2/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v3.8.2/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v3.8.2/Collection.Set"}]},"__N_SSG":true}