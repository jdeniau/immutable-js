{"pageProps":{"versions":["v4.0.0-rc.12","v3.8.2","latest@main"],"version":"latest@main","def":{"qualifiedName":"Set","doc":{"synopsis":"<p>A Collection of unique values with <code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> adds and has.</p>\n","description":"<p>When iterating a Set, the entries will be (value, value) pairs. Iteration\norder of a Set is undefined, however is stable. Multiple iterations of the\nsame Set will iterate in the same order.</p>\n<p>Set values, like Map keys, may be of any type. Equality is determined using\n<code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>, enabling Sets to uniquely include other Immutable\ncollections, custom value types, and NaN.</p>\n","notes":[]},"functions":{"isSet":{"name":"Set.isSet","label":"Set.isSet()","id":"isSet()","isStatic":true,"signatures":[{"line":1593,"params":[{"name":"maybeSet","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/latest@main/Set#isSet()"},"of":{"name":"Set.of","label":"Set.of()","id":"of()","isStatic":true,"signatures":[{"line":1598,"typeParams":["T"],"params":[{"name":"values","type":{"k":12,"name":"Array","args":[{"k":11,"param":"T"}]},"varArgs":true}],"type":{"k":12,"name":"Set","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/Set#of()"},"fromKeys":{"name":"Set.fromKeys","label":"Set.fromKeys()","id":"fromKeys()","isStatic":true,"signatures":[{"line":1604,"typeParams":["T"],"params":[{"name":"iter","type":{"k":12,"name":"Collection","args":[{"k":11,"param":"T"},{"k":2}],"url":"/docs/latest@main/Collection"}}],"type":{"k":12,"name":"Set","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Set"}},{"line":1605,"params":[{"name":"obj","type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":2}}]}}],"type":{"k":12,"name":"Set","args":[{"k":7}],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/Set#fromKeys()"},"intersect":{"name":"Set.intersect","label":"Set.intersect()","id":"intersect()","isStatic":true,"signatures":[{"line":1620,"typeParams":["T"],"params":[{"name":"sets","type":{"k":12,"name":"Iterable","args":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]}]}}],"type":{"k":12,"name":"Set","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/Set#intersect()"},"union":{"name":"Set.union","label":"Set.union()","id":"union()","isStatic":true,"signatures":[{"line":1635,"typeParams":["T"],"params":[{"name":"sets","type":{"k":12,"name":"Iterable","args":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]}]}}],"type":{"k":12,"name":"Set","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/Set#union()"}},"call":{"name":"Set","label":"Set()","id":"Set()","doc":{"synopsis":"<p>Create a new immutable Set containing the values of the provided\ncollection-like.</p>\n","description":"<p>Note: <code><a href=\"/docs/latest@main/Set\">Set</a></code> is a factory function and not a class, and does not use the\n<code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n","notes":[]},"signatures":[{"line":1645,"typeParams":["T"],"params":[{"name":"collection","type":{"k":13,"types":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]},{"k":12,"name":"ArrayLike","args":[{"k":11,"param":"T"}]}]},"optional":true}],"type":{"k":12,"name":"Set","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/Set#Set()"},"interface":{"members":{"size":{"name":"size","label":"size","id":"size","line":1651,"doc":{"synopsis":"<p>The number of items in this Set.</p>\n","description":"","notes":[]},"type":{"k":6},"url":"/docs/latest@main/Set#size"},"add":{"name":"add","label":"add()","id":"add()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Set which also includes this value.</p>\n","description":"<p>Note: <code><a href=\"/docs/latest@main/Set#add()\">add</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1660,"params":[{"name":"value","type":{"k":11,"param":"T"}}],"type":{"k":3}}],"url":"/docs/latest@main/Set#add()"},"delete":{"name":"delete","label":"delete()","id":"delete()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Set which excludes this value.</p>\n","description":"<p>Note: <code><a href=\"/docs/latest@main/Set#delete()\">delete</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Set#delete()\">delete</a></code> <strong>cannot</strong> be safely used in IE8, use <code><a href=\"/docs/latest@main/remove()\">remove</a></code> if\nsupporting old browsers.</p>\n","notes":[{"name":"alias","body":"remove"}]},"signatures":[{"line":1672,"params":[{"name":"value","type":{"k":11,"param":"T"}}],"type":{"k":3}}],"url":"/docs/latest@main/Set#delete()"},"clear":{"name":"clear","label":"clear()","id":"clear()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Set containing no values.</p>\n","description":"<p>Note: <code><a href=\"/docs/latest@main/Set#clear()\">clear</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1680,"type":{"k":3}}],"url":"/docs/latest@main/Set#clear()"},"union":{"name":"union","label":"union()","id":"union()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a Set including any value from <code><span class=\"t param\">collections</span></code> that does not already\nexist in this Set.</p>\n","description":"<p>Note: <code><a href=\"/docs/latest@main/Set#union()\">union</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n","notes":[{"name":"alias","body":"merge"},{"name":"alias","body":"concat"}]},"signatures":[{"line":1690,"typeParams":["C"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"C"}]}]},"varArgs":true}],"type":{"k":12,"name":"Set","args":[{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"C"}]}],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/Set#union()"},"intersect":{"name":"intersect","label":"intersect()","id":"intersect()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a Set which has removed any values not also contained\nwithin <code><span class=\"t param\">collections</span></code>.</p>\n","description":"<p>Note: <code><a href=\"/docs/latest@main/Set#intersect()\">intersect</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1700,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#intersect()"},"subtract":{"name":"subtract","label":"subtract()","id":"subtract()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a Set excluding any values contained within <code><span class=\"t param\">collections</span></code>.</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>subtract<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedSet [2]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Set#subtract()\">subtract</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p></p>\n","notes":[]},"signatures":[{"line":1714,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#subtract()"},"withMutations":{"name":"withMutations","label":"withMutations()","id":"withMutations()","group":"Transient changes","doc":{"synopsis":"<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#withMutations()\">Map#withMutations</a></code></p>\n"}]},"signatures":[{"line":1725,"params":[{"name":"mutator","type":{"k":10,"params":[{"name":"mutable","type":{"k":3}}],"type":{"k":2}}}],"type":{"k":3}}],"url":"/docs/latest@main/Set#withMutations()"},"asMutable":{"name":"asMutable","label":"asMutable()","id":"asMutable()","group":"Transient changes","doc":{"synopsis":"<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"}]},"signatures":[{"line":1734,"type":{"k":3}}],"url":"/docs/latest@main/Set#asMutable()"},"wasAltered":{"name":"wasAltered","label":"wasAltered()","id":"wasAltered()","group":"Transient changes","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#wasAltered()\">Map#wasAltered</a></code></p>\n"}]},"signatures":[{"line":1739,"type":{"k":5}}],"url":"/docs/latest@main/Set#wasAltered()"},"asImmutable":{"name":"asImmutable","label":"asImmutable()","id":"asImmutable()","group":"Transient changes","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"}]},"signatures":[{"line":1744,"type":{"k":3}}],"url":"/docs/latest@main/Set#asImmutable()"},"map":{"name":"map","label":"map()","id":"map()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Set with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Set [10,20]</span></code>","notes":[]},"signatures":[{"line":1755,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Set","args":[{"k":11,"param":"M"}],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/Set#map()","overrides":{"interface":"Collection.Set","label":"map()","url":"/docs/latest@main/Collection.Set#map()"}},"flatMap":{"name":"flatMap","label":"flatMap()","id":"flatMap()","group":"Sequence algorithms","doc":{"synopsis":"<p>Flat-maps the Set, returning a new Set.</p>\n","description":"<p>Similar to <code><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n","notes":[]},"signatures":[{"line":1765,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"M"}]}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Set","args":[{"k":11,"param":"M"}],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/Set#flatMap()","overrides":{"interface":"Collection.Set","label":"flatMap()","url":"/docs/latest@main/Collection.Set#flatMap()"}},"filter":{"name":"filter","label":"filter()","id":"filter()","group":"Sequence algorithms","signatures":[{"line":1777,"typeParams":["F"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Set","args":[{"k":11,"param":"F"}],"url":"/docs/latest@main/Set"}},{"line":1781,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#filter()","overrides":{"interface":"Collection.Set","label":"filter()","url":"/docs/latest@main/Collection.Set#filter()"}},"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Set collection to equivalent native JavaScript Array.</p>\n","description":"","notes":[]},"signatures":[{"line":3808,"type":{"k":12,"name":"Array","args":[{"k":2}]}}],"url":"/docs/latest@main/Set#toJS()","inherited":{"interface":"Collection.Set","label":"toJS()","url":"/docs/latest@main/Collection.Set#toJS()"}},"toJSON":{"name":"toJSON","label":"toJSON()","id":"toJSON()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Set collection to equivalent native JavaScript Array.</p>\n","description":"","notes":[]},"signatures":[{"line":3813,"type":{"k":12,"name":"Array","args":[{"k":11,"param":"T"}]}}],"url":"/docs/latest@main/Set#toJSON()","inherited":{"interface":"Collection.Set","label":"toJSON()","url":"/docs/latest@main/Collection.Set#toJSON()"}},"toArray":{"name":"toArray","label":"toArray()","id":"toArray()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this collection to an Array.</p>\n","description":"","notes":[]},"signatures":[{"line":3818,"type":{"k":12,"name":"Array","args":[{"k":11,"param":"T"}]}}],"url":"/docs/latest@main/Set#toArray()","inherited":{"interface":"Collection.Set","label":"toArray()","url":"/docs/latest@main/Collection.Set#toArray()"}},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns Seq.Set.</p>\n","description":"","notes":[]},"signatures":[{"line":3824,"type":{"k":12,"name":"Seq.Set","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Seq.Set"}}],"url":"/docs/latest@main/Set#toSeq()","inherited":{"interface":"Collection.Set","label":"toSeq()","url":"/docs/latest@main/Collection.Set#toSeq()"}},"concat":{"name":"concat","label":"concat()","id":"concat()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection with other collections concatenated to this one.</p>\n","description":"","notes":[]},"signatures":[{"line":3831,"typeParams":["U"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"U"}]}]},"varArgs":true}],"type":{"k":12,"name":"Collection.Set","args":[{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"U"}]}],"url":"/docs/latest@main/Collection.Set"}}],"url":"/docs/latest@main/Set#concat()","inherited":{"interface":"Collection.Set","label":"concat()","url":"/docs/latest@main/Collection.Set#concat()"}},"[Symbol.iterator]":{"name":"[Symbol.iterator]","label":"[Symbol.iterator]()","id":"[Symbol.iterator]()","group":"Sequence algorithms","signatures":[{"line":3876,"type":{"k":12,"name":"IterableIterator","args":[{"k":11,"param":"T"}]}}],"url":"/docs/latest@main/Set#[Symbol.iterator]()","inherited":{"interface":"Collection.Set","label":"[Symbol.iterator]()","url":"/docs/latest@main/Collection.Set#[Symbol.iterator]()"}},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","doc":{"synopsis":"<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":3922,"params":[{"name":"other","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/latest@main/Set#equals()","inherited":{"interface":"Collection","label":"equals()","url":"/docs/latest@main/Collection#equals()"}},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","doc":{"synopsis":"<p>Computes and returns the hashed identity for this Collection.</p>\n","description":"<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n","notes":[]},"signatures":[{"line":3948,"type":{"k":6}}],"url":"/docs/latest@main/Set#hashCode()","inherited":{"interface":"Collection","label":"hashCode()","url":"/docs/latest@main/Collection#hashCode()"}},"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","signatures":[{"line":3960,"typeParams":["NSV"],"params":[{"name":"key","type":{"k":11,"param":"T"}},{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"NSV"}]}},{"line":3961,"params":[{"name":"key","type":{"k":11,"param":"T"}}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#get()","inherited":{"interface":"Collection","label":"get()","url":"/docs/latest@main/Collection#get()"}},"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","doc":{"synopsis":"<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[]},"signatures":[{"line":3967,"params":[{"name":"key","type":{"k":11,"param":"T"}}],"type":{"k":5}}],"url":"/docs/latest@main/Set#has()","inherited":{"interface":"Collection","label":"has()","url":"/docs/latest@main/Collection#has()"}},"includes":{"name":"includes","label":"includes()","id":"includes()","group":"Reading values","doc":{"synopsis":"<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[{"name":"alias","body":"contains"}]},"signatures":[{"line":3974,"params":[{"name":"value","type":{"k":11,"param":"T"}}],"type":{"k":5}}],"url":"/docs/latest@main/Set#includes()","inherited":{"interface":"Collection","label":"includes()","url":"/docs/latest@main/Collection#includes()"}},"first":{"name":"first","label":"first()","id":"first()","group":"Reading values","doc":{"synopsis":"<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":3983,"typeParams":["NSV"],"params":[{"name":"notSetValue","type":{"k":11,"param":"NSV"},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"NSV"}]}}],"url":"/docs/latest@main/Set#first()","inherited":{"interface":"Collection","label":"first()","url":"/docs/latest@main/Collection#first()"}},"last":{"name":"last","label":"last()","id":"last()","group":"Reading values","doc":{"synopsis":"<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":3991,"typeParams":["NSV"],"params":[{"name":"notSetValue","type":{"k":11,"param":"NSV"},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"NSV"}]}}],"url":"/docs/latest@main/Set#last()","inherited":{"interface":"Collection","label":"last()","url":"/docs/latest@main/Collection#last()"}},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","doc":{"synopsis":"<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n","notes":[]},"signatures":[{"line":4016,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"notSetValue","type":{"k":2},"optional":true}],"type":{"k":2}}],"url":"/docs/latest@main/Set#getIn()","inherited":{"interface":"Collection","label":"getIn()","url":"/docs/latest@main/Collection#getIn()"}},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","doc":{"synopsis":"<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n","description":"","notes":[]},"signatures":[{"line":4022,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":5}}],"url":"/docs/latest@main/Set#hasIn()","inherited":{"interface":"Collection","label":"hasIn()","url":"/docs/latest@main/Collection#hasIn()"}},"update":{"name":"update","label":"update()","id":"update()","group":"Persistent changes","doc":{"synopsis":"<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n","description":"<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n","notes":[]},"signatures":[{"line":4047,"typeParams":["R"],"params":[{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/latest@main/Set#update()","inherited":{"interface":"Collection","label":"update()","url":"/docs/latest@main/Collection#update()"}},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Collection to an Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":4080,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"T"}}]}}],"url":"/docs/latest@main/Set#toObject()","inherited":{"interface":"Collection","label":"toObject()","url":"/docs/latest@main/Collection#toObject()"}},"toMap":{"name":"toMap","label":"toMap()","id":"toMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4090,"type":{"k":12,"name":"Map","args":[{"k":11,"param":"T"},{"k":11,"param":"T"}],"url":"/docs/latest@main/Map"}}],"url":"/docs/latest@main/Set#toMap()","inherited":{"interface":"Collection","label":"toMap()","url":"/docs/latest@main/Collection#toMap()"}},"toOrderedMap":{"name":"toOrderedMap","label":"toOrderedMap()","id":"toOrderedMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4098,"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"T"},{"k":11,"param":"T"}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/Set#toOrderedMap()","inherited":{"interface":"Collection","label":"toOrderedMap()","url":"/docs/latest@main/Collection#toOrderedMap()"}},"toSet":{"name":"toSet","label":"toSet()","id":"toSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":4107,"type":{"k":12,"name":"Set","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/Set#toSet()","inherited":{"interface":"Collection","label":"toSet()","url":"/docs/latest@main/Collection#toSet()"}},"toOrderedSet":{"name":"toOrderedSet","label":"toOrderedSet()","id":"toOrderedSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4116,"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/OrderedSet"}}],"url":"/docs/latest@main/Set#toOrderedSet()","inherited":{"interface":"Collection","label":"toOrderedSet()","url":"/docs/latest@main/Collection#toOrderedSet()"}},"toList":{"name":"toList","label":"toList()","id":"toList()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a List, discarding keys.</p>\n","description":"<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>","notes":[]},"signatures":[{"line":4134,"type":{"k":12,"name":"List","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/List"}}],"url":"/docs/latest@main/Set#toList()","inherited":{"interface":"Collection","label":"toList()","url":"/docs/latest@main/Collection#toList()"}},"toStack":{"name":"toStack","label":"toStack()","id":"toStack()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":4143,"type":{"k":12,"name":"Stack","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Stack"}}],"url":"/docs/latest@main/Set#toStack()","inherited":{"interface":"Collection","label":"toStack()","url":"/docs/latest@main/Collection#toStack()"}},"toKeyedSeq":{"name":"toKeyedSeq","label":"toKeyedSeq()","id":"toKeyedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n","description":"<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>","notes":[]},"signatures":[{"line":4175,"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"T"},{"k":11,"param":"T"}],"url":"/docs/latest@main/Seq.Keyed"}}],"url":"/docs/latest@main/Set#toKeyedSeq()","inherited":{"interface":"Collection","label":"toKeyedSeq()","url":"/docs/latest@main/Collection#toKeyedSeq()"}},"toIndexedSeq":{"name":"toIndexedSeq","label":"toIndexedSeq()","id":"toIndexedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4180,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Seq.Indexed"}}],"url":"/docs/latest@main/Set#toIndexedSeq()","inherited":{"interface":"Collection","label":"toIndexedSeq()","url":"/docs/latest@main/Collection#toIndexedSeq()"}},"toSetSeq":{"name":"toSetSeq","label":"toSetSeq()","id":"toSetSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4185,"type":{"k":12,"name":"Seq.Set","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Seq.Set"}}],"url":"/docs/latest@main/Set#toSetSeq()","inherited":{"interface":"Collection","label":"toSetSeq()","url":"/docs/latest@main/Collection#toSetSeq()"}},"keys":{"name":"keys","label":"keys()","id":"keys()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4196,"type":{"k":12,"name":"IterableIterator","args":[{"k":11,"param":"T"}]}}],"url":"/docs/latest@main/Set#keys()","inherited":{"interface":"Collection","label":"keys()","url":"/docs/latest@main/Collection#keys()"}},"values":{"name":"values","label":"values()","id":"values()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4205,"type":{"k":12,"name":"IterableIterator","args":[{"k":11,"param":"T"}]}}],"url":"/docs/latest@main/Set#values()","inherited":{"interface":"Collection","label":"values()","url":"/docs/latest@main/Collection#values()"}},"entries":{"name":"entries","label":"entries()","id":"entries()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4214,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":[{"k":11,"param":"T"},{"k":11,"param":"T"}]}]}}],"url":"/docs/latest@main/Set#entries()","inherited":{"interface":"Collection","label":"entries()","url":"/docs/latest@main/Collection#entries()"}},"keySeq":{"name":"keySeq","label":"keySeq()","id":"keySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n","description":"","notes":[]},"signatures":[{"line":4224,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Seq.Indexed"}}],"url":"/docs/latest@main/Set#keySeq()","inherited":{"interface":"Collection","label":"keySeq()","url":"/docs/latest@main/Collection#keySeq()"}},"valueSeq":{"name":"valueSeq","label":"valueSeq()","id":"valueSeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4229,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Seq.Indexed"}}],"url":"/docs/latest@main/Set#valueSeq()","inherited":{"interface":"Collection","label":"valueSeq()","url":"/docs/latest@main/Collection#valueSeq()"}},"entrySeq":{"name":"entrySeq","label":"entrySeq()","id":"entrySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n","description":"","notes":[]},"signatures":[{"line":4234,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":[{"k":11,"param":"T"},{"k":11,"param":"T"}]}],"url":"/docs/latest@main/Seq.Indexed"}}],"url":"/docs/latest@main/Set#entrySeq()","inherited":{"interface":"Collection","label":"entrySeq()","url":"/docs/latest@main/Collection#entrySeq()"}},"filterNot":{"name":"filterNot","label":"filterNot()","id":"filterNot()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n","notes":[]},"signatures":[{"line":4302,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#filterNot()","inherited":{"interface":"Collection","label":"filterNot()","url":"/docs/latest@main/Collection#filterNot()"}},"reverse":{"name":"reverse","label":"reverse()","id":"reverse()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type in reverse order.</p>\n","description":"","notes":[]},"signatures":[{"line":4310,"type":{"k":3}}],"url":"/docs/latest@main/Set#reverse()","inherited":{"interface":"Collection","label":"reverse()","url":"/docs/latest@main/Collection#reverse()"}},"sort":{"name":"sort","label":"sort()","id":"sort()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n","description":"<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n","notes":[]},"signatures":[{"line":4345,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"T"}},{"name":"valueB","type":{"k":11,"param":"T"}}],"type":{"k":6}},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#sort()","inherited":{"interface":"Collection","label":"sort()","url":"/docs/latest@main/Collection#sort()"}},"sortBy":{"name":"sortBy","label":"sortBy()","id":"sortBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n","notes":[]},"signatures":[{"line":4368,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#sortBy()","inherited":{"interface":"Collection","label":"sortBy()","url":"/docs/latest@main/Collection#sortBy()"}},"groupBy":{"name":"groupBy","label":"groupBy()","id":"groupBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>","notes":[]},"signatures":[{"line":4397,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"G"},{"k":12,"name":"Collection","args":[{"k":11,"param":"T"},{"k":11,"param":"T"}]}],"url":"/docs/latest@main/Seq.Keyed"}}],"url":"/docs/latest@main/Set#groupBy()","inherited":{"interface":"Collection","label":"groupBy()","url":"/docs/latest@main/Collection#groupBy()"}},"forEach":{"name":"forEach","label":"forEach()","id":"forEach()","group":"Side effects","doc":{"synopsis":"<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n","description":"<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n","notes":[]},"signatures":[{"line":4411,"params":[{"name":"sideEffect","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/latest@main/Set#forEach()","inherited":{"interface":"Collection","label":"forEach()","url":"/docs/latest@main/Collection#forEach()"}},"slice":{"name":"slice","label":"slice()","id":"slice()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n","description":"<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n","notes":[]},"signatures":[{"line":4434,"params":[{"name":"begin","type":{"k":6},"optional":true},{"name":"end","type":{"k":6},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#slice()","inherited":{"interface":"Collection","label":"slice()","url":"/docs/latest@main/Collection#slice()"}},"rest":{"name":"rest","label":"rest()","id":"rest()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n","description":"","notes":[]},"signatures":[{"line":4440,"type":{"k":3}}],"url":"/docs/latest@main/Set#rest()","inherited":{"interface":"Collection","label":"rest()","url":"/docs/latest@main/Collection#rest()"}},"butLast":{"name":"butLast","label":"butLast()","id":"butLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n","description":"","notes":[]},"signatures":[{"line":4446,"type":{"k":3}}],"url":"/docs/latest@main/Set#butLast()","inherited":{"interface":"Collection","label":"butLast()","url":"/docs/latest@main/Collection#butLast()"}},"skip":{"name":"skip","label":"skip()","id":"skip()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4452,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/latest@main/Set#skip()","inherited":{"interface":"Collection","label":"skip()","url":"/docs/latest@main/Collection#skip()"}},"skipLast":{"name":"skipLast","label":"skipLast()","id":"skipLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4458,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/latest@main/Set#skipLast()","inherited":{"interface":"Collection","label":"skipLast()","url":"/docs/latest@main/Collection#skipLast()"}},"skipWhile":{"name":"skipWhile","label":"skipWhile()","id":"skipWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n","notes":[]},"signatures":[{"line":4472,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#skipWhile()","inherited":{"interface":"Collection","label":"skipWhile()","url":"/docs/latest@main/Collection#skipWhile()"}},"skipUntil":{"name":"skipUntil","label":"skipUntil()","id":"skipUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n","notes":[]},"signatures":[{"line":4489,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#skipUntil()","inherited":{"interface":"Collection","label":"skipUntil()","url":"/docs/latest@main/Collection#skipUntil()"}},"take":{"name":"take","label":"take()","id":"take()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4498,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/latest@main/Set#take()","inherited":{"interface":"Collection","label":"take()","url":"/docs/latest@main/Collection#take()"}},"takeLast":{"name":"takeLast","label":"takeLast()","id":"takeLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4504,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/latest@main/Set#takeLast()","inherited":{"interface":"Collection","label":"takeLast()","url":"/docs/latest@main/Collection#takeLast()"}},"takeWhile":{"name":"takeWhile","label":"takeWhile()","id":"takeWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n","notes":[]},"signatures":[{"line":4518,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#takeWhile()","inherited":{"interface":"Collection","label":"takeWhile()","url":"/docs/latest@main/Collection#takeWhile()"}},"takeUntil":{"name":"takeUntil","label":"takeUntil()","id":"takeUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n","notes":[]},"signatures":[{"line":4535,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/Set#takeUntil()","inherited":{"interface":"Collection","label":"takeUntil()","url":"/docs/latest@main/Collection#takeUntil()"}},"flatten":{"name":"flatten","label":"flatten()","id":"flatten()","group":"tslint:disable-next-line unified-signatures","signatures":[{"line":4566,"params":[{"name":"depth","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/latest@main/Collection"}},{"line":4568,"params":[{"name":"shallow","type":{"k":5},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/latest@main/Collection"}}],"url":"/docs/latest@main/Set#flatten()","inherited":{"interface":"Collection","label":"flatten()","url":"/docs/latest@main/Collection#flatten()"}},"reduce":{"name":"reduce","label":"reduce()","id":"reduce()","group":"Reducing a value","signatures":[{"line":4602,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":11,"param":"R"}},{"line":4607,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"R"}]}},{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/latest@main/Set#reduce()","inherited":{"interface":"Collection","label":"reduce()","url":"/docs/latest@main/Collection#reduce()"}},"reduceRight":{"name":"reduceRight","label":"reduceRight()","id":"reduceRight()","group":"Reducing a value","signatures":[{"line":4617,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":11,"param":"R"}},{"line":4622,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"R"}]}},{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/latest@main/Set#reduceRight()","inherited":{"interface":"Collection","label":"reduceRight()","url":"/docs/latest@main/Collection#reduceRight()"}},"every":{"name":"every","label":"every()","id":"every()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4629,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":5}}],"url":"/docs/latest@main/Set#every()","inherited":{"interface":"Collection","label":"every()","url":"/docs/latest@main/Collection#every()"}},"some":{"name":"some","label":"some()","id":"some()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4637,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":5}}],"url":"/docs/latest@main/Set#some()","inherited":{"interface":"Collection","label":"some()","url":"/docs/latest@main/Collection#some()"}},"join":{"name":"join","label":"join()","id":"join()","group":"Reducing a value","doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":4646,"params":[{"name":"separator","type":{"k":7},"optional":true}],"type":{"k":7}}],"url":"/docs/latest@main/Set#join()","inherited":{"interface":"Collection","label":"join()","url":"/docs/latest@main/Collection#join()"}},"isEmpty":{"name":"isEmpty","label":"isEmpty()","id":"isEmpty()","group":"Reducing a value","doc":{"synopsis":"<p>Returns true if this Collection includes no values.</p>\n","description":"<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n","notes":[]},"signatures":[{"line":4654,"type":{"k":5}}],"url":"/docs/latest@main/Set#isEmpty()","inherited":{"interface":"Collection","label":"isEmpty()","url":"/docs/latest@main/Collection#isEmpty()"}},"count":{"name":"count","label":"count()","id":"count()","group":"Reducing a value","signatures":[{"line":4666,"type":{"k":6}},{"line":4667,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/latest@main/Set#count()","inherited":{"interface":"Collection","label":"count()","url":"/docs/latest@main/Collection#count()"}},"countBy":{"name":"countBy","label":"countBy()","id":"countBy()","group":"Reducing a value","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n","notes":[]},"signatures":[{"line":4678,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":6}],"url":"/docs/latest@main/Map"}}],"url":"/docs/latest@main/Set#countBy()","inherited":{"interface":"Collection","label":"countBy()","url":"/docs/latest@main/Collection#countBy()"}},"find":{"name":"find","label":"find()","id":"find()","group":"Search for value","doc":{"synopsis":"<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":4688,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"T"},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#find()","inherited":{"interface":"Collection","label":"find()","url":"/docs/latest@main/Collection#find()"}},"findLast":{"name":"findLast","label":"findLast()","id":"findLast()","group":"Search for value","doc":{"synopsis":"<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":4699,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"T"},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#findLast()","inherited":{"interface":"Collection","label":"findLast()","url":"/docs/latest@main/Collection#findLast()"}},"findEntry":{"name":"findEntry","label":"findEntry()","id":"findEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":4708,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"T"},"optional":true}],"type":{"k":13,"types":[{"k":15,"types":[{"k":11,"param":"T"},{"k":11,"param":"T"}]},{"k":4}]}}],"url":"/docs/latest@main/Set#findEntry()","inherited":{"interface":"Collection","label":"findEntry()","url":"/docs/latest@main/Collection#findEntry()"}},"findLastEntry":{"name":"findLastEntry","label":"findLastEntry()","id":"findLastEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":4720,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"T"},"optional":true}],"type":{"k":13,"types":[{"k":15,"types":[{"k":11,"param":"T"},{"k":11,"param":"T"}]},{"k":4}]}}],"url":"/docs/latest@main/Set#findLastEntry()","inherited":{"interface":"Collection","label":"findLastEntry()","url":"/docs/latest@main/Collection#findLastEntry()"}},"findKey":{"name":"findKey","label":"findKey()","id":"findKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":4729,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#findKey()","inherited":{"interface":"Collection","label":"findKey()","url":"/docs/latest@main/Collection#findKey()"}},"findLastKey":{"name":"findLastKey","label":"findLastKey()","id":"findLastKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":4739,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#findLastKey()","inherited":{"interface":"Collection","label":"findLastKey()","url":"/docs/latest@main/Collection#findLastKey()"}},"keyOf":{"name":"keyOf","label":"keyOf()","id":"keyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4747,"params":[{"name":"searchValue","type":{"k":11,"param":"T"}}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#keyOf()","inherited":{"interface":"Collection","label":"keyOf()","url":"/docs/latest@main/Collection#keyOf()"}},"lastKeyOf":{"name":"lastKeyOf","label":"lastKeyOf()","id":"lastKeyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4752,"params":[{"name":"searchValue","type":{"k":11,"param":"T"}}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#lastKeyOf()","inherited":{"interface":"Collection","label":"lastKeyOf()","url":"/docs/latest@main/Collection#lastKeyOf()"}},"max":{"name":"max","label":"max()","id":"max()","group":"Search for value","doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":4769,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"T"}},{"name":"valueB","type":{"k":11,"param":"T"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#max()","inherited":{"interface":"Collection","label":"max()","url":"/docs/latest@main/Collection#max()"}},"maxBy":{"name":"maxBy","label":"maxBy()","id":"maxBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n","notes":[]},"signatures":[{"line":4786,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#maxBy()","inherited":{"interface":"Collection","label":"maxBy()","url":"/docs/latest@main/Collection#maxBy()"}},"min":{"name":"min","label":"min()","id":"min()","group":"Search for value","doc":{"synopsis":"<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":4806,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"T"}},{"name":"valueB","type":{"k":11,"param":"T"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#min()","inherited":{"interface":"Collection","label":"min()","url":"/docs/latest@main/Collection#min()"}},"minBy":{"name":"minBy","label":"minBy()","id":"minBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n","notes":[]},"signatures":[{"line":4823,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":4}]}}],"url":"/docs/latest@main/Set#minBy()","inherited":{"interface":"Collection","label":"minBy()","url":"/docs/latest@main/Collection#minBy()"}},"isSubset":{"name":"isSubset","label":"isSubset()","id":"isSubset()","group":"Comparison","doc":{"synopsis":"<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4833,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]}}],"type":{"k":5}}],"url":"/docs/latest@main/Set#isSubset()","inherited":{"interface":"Collection","label":"isSubset()","url":"/docs/latest@main/Collection#isSubset()"}},"isSuperset":{"name":"isSuperset","label":"isSuperset()","id":"isSuperset()","group":"Comparison","doc":{"synopsis":"<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":4838,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]}}],"type":{"k":5}}],"url":"/docs/latest@main/Set#isSuperset()","inherited":{"interface":"Collection","label":"isSuperset()","url":"/docs/latest@main/Collection#isSuperset()"}}},"line":1647,"typeParams":["T"],"extends":[{"k":12,"name":"Collection.Set","args":[{"k":11,"param":"T"}],"url":"/docs/latest@main/Collection.Set"}]},"label":"Set","url":"/docs/latest@main/Set"},"sidebarLinks":[{"label":"List","url":"/docs/latest@main/List"},{"label":"Map","url":"/docs/latest@main/Map"},{"label":"OrderedMap","url":"/docs/latest@main/OrderedMap"},{"label":"Set","url":"/docs/latest@main/Set"},{"label":"OrderedSet","url":"/docs/latest@main/OrderedSet"},{"label":"Stack","url":"/docs/latest@main/Stack"},{"label":"Range()","url":"/docs/latest@main/Range()"},{"label":"Repeat()","url":"/docs/latest@main/Repeat()"},{"label":"Record","url":"/docs/latest@main/Record"},{"label":"Record.Factory","url":"/docs/latest@main/Record.Factory"},{"label":"Seq","url":"/docs/latest@main/Seq"},{"label":"Seq.Keyed","url":"/docs/latest@main/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/latest@main/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/latest@main/Seq.Set"},{"label":"Collection","url":"/docs/latest@main/Collection"},{"label":"Collection.Keyed","url":"/docs/latest@main/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/latest@main/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/latest@main/Collection.Set"},{"label":"ValueObject","url":"/docs/latest@main/ValueObject"},{"label":"fromJS()","url":"/docs/latest@main/fromJS()"},{"label":"is()","url":"/docs/latest@main/is()"},{"label":"hash()","url":"/docs/latest@main/hash()"},{"label":"isImmutable()","url":"/docs/latest@main/isImmutable()"},{"label":"isCollection()","url":"/docs/latest@main/isCollection()"},{"label":"isKeyed()","url":"/docs/latest@main/isKeyed()"},{"label":"isIndexed()","url":"/docs/latest@main/isIndexed()"},{"label":"isAssociative()","url":"/docs/latest@main/isAssociative()"},{"label":"isOrdered()","url":"/docs/latest@main/isOrdered()"},{"label":"isValueObject()","url":"/docs/latest@main/isValueObject()"},{"label":"isSeq()","url":"/docs/latest@main/isSeq()"},{"label":"isList()","url":"/docs/latest@main/isList()"},{"label":"isMap()","url":"/docs/latest@main/isMap()"},{"label":"isOrderedMap()","url":"/docs/latest@main/isOrderedMap()"},{"label":"isStack()","url":"/docs/latest@main/isStack()"},{"label":"isSet()","url":"/docs/latest@main/isSet()"},{"label":"isOrderedSet()","url":"/docs/latest@main/isOrderedSet()"},{"label":"isRecord()","url":"/docs/latest@main/isRecord()"},{"label":"get()","url":"/docs/latest@main/get()"},{"label":"has()","url":"/docs/latest@main/has()"},{"label":"remove()","url":"/docs/latest@main/remove()"},{"label":"set()","url":"/docs/latest@main/set()"},{"label":"update()","url":"/docs/latest@main/update()"},{"label":"getIn()","url":"/docs/latest@main/getIn()"},{"label":"hasIn()","url":"/docs/latest@main/hasIn()"},{"label":"removeIn()","url":"/docs/latest@main/removeIn()"},{"label":"setIn()","url":"/docs/latest@main/setIn()"},{"label":"updateIn()","url":"/docs/latest@main/updateIn()"},{"label":"merge()","url":"/docs/latest@main/merge()"},{"label":"mergeWith()","url":"/docs/latest@main/mergeWith()"},{"label":"mergeDeep()","url":"/docs/latest@main/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/latest@main/mergeDeepWith()"}]},"__N_SSG":true}