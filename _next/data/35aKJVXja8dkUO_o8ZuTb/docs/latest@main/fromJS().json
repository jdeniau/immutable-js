{"pageProps":{"versions":["v4.0.0-rc.12","v3.8.2","latest@main"],"version":"latest@main","def":{"qualifiedName":"fromJS","call":{"name":"fromJS","label":"fromJS()","id":"fromJS()","doc":{"synopsis":"<p>Deeply converts plain JS objects and arrays to Immutable Maps and Lists.</p>\n","description":"<p>If a <code><span class=\"t param\">reviver</span></code> is optionally provided, it will be called with every\ncollection as a Seq (beginning with the most nested collections\nand proceeding to the top-level collection itself), along with the key\nreferring to each collection and the parent JS object provided as <code><span class=\"token var\" >this</span></code>.\nFor the top level, object, the key will be <code><span class=\"token string\" >\"\"</span></code>. This <code><span class=\"t param\">reviver</span></code> is expected\nto return a new Immutable Collection, allowing for custom conversions from\ndeep JS objects. Finally, a <code>path</code> is provided which is the sequence of\nkeys to this value from the starting value.</p>\n<p><code><span class=\"t param\">reviver</span></code> acts similarly to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\" title=\"Using the reviver parameter\">same parameter in <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\" target=\"_blank\" rel=\"noopener\">JSON.parse</a></code></a>.</p>\n<p>If <code><span class=\"t param\">reviver</span></code> is not provided, the default behavior will convert Objects\ninto Maps and Arrays into Lists like so:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> fromJS<span class=\"token punctuation\" >,</span> isKeyed <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> isKeyed<span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >?</span> value<span class=\"token punctuation\" >.</span>toMap<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >:</span> value<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p><code><a href=\"/docs/latest@main/fromJS()\">fromJS</a></code> is conservative in its conversion. It will only convert\narrays which pass <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\" target=\"_blank\" rel=\"noopener\">Array.isArray</a></code> to Lists, and only raw objects (no custom\nprototype) to Map.</p>\n<p>Accordingly, this example converts native JS data to OrderedMap and List:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> fromJS<span class=\"token punctuation\" >,</span> isKeyed <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\nfromJS<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >,</span> path<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >,</span> path<span class=\"token punctuation\" >)</span>\n  <span class=\"token keyword\" >return</span> isKeyed<span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >?</span> value<span class=\"token punctuation\" >.</span>toOrderedMap<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >:</span> value<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n\n<span class=\"token operator\" >></span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span> <span class=\"token punctuation\" >]</span>\n<span class=\"token operator\" >></span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span> <span class=\"token string\" >\"a\"</span> <span class=\"token punctuation\" >]</span>\n<span class=\"token operator\" >></span> <span class=\"token string\" >\"\"</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Keep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a\nquote-less shorthand, while Immutable Maps accept keys of any type.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >let</span> obj <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"one\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token qualifier\" >Object</span><span class=\"token punctuation\" >.</span>keys<span class=\"token punctuation\" >(</span>obj<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// [ \"1\" ]\n</span>assert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span>obj<span class=\"token punctuation\" >[</span><span class=\"token string\" >\"1\"</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> obj<span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// \"one\" === \"one\"\n</span>\n<span class=\"token keyword\" >let</span> map <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span>obj<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notEqual<span class=\"token punctuation\" >(</span>map<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >\"1\"</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> map<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// \"one\" !== undefined</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Property access for JavaScript Objects first converts the key to a string,\nbut since Immutable Map keys can be of any type the argument to <code><a href=\"/docs/latest@main/get()\">get()</a></code> is\nnot altered.</p>\n","notes":[]},"signatures":[{"line":4954,"params":[{"name":"jsValue","type":{"k":2}},{"name":"reviver","type":{"k":10,"params":[{"name":"key","type":{"k":13,"types":[{"k":7},{"k":6}]}},{"name":"sequence","type":{"k":13,"types":[{"k":12,"name":"Collection.Keyed","args":[{"k":7},{"k":2}]},{"k":12,"name":"Collection.Indexed","args":[{"k":2}]}]}},{"name":"path","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":7},{"k":6}]}]},"optional":true}],"type":{"k":2}},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/latest@main/Collection"}}],"url":"/docs/latest@main/fromJS()"},"label":"fromJS()","url":"/docs/latest@main/fromJS()"},"sidebarLinks":[{"label":"List","url":"/docs/latest@main/List"},{"label":"Map","url":"/docs/latest@main/Map"},{"label":"OrderedMap","url":"/docs/latest@main/OrderedMap"},{"label":"Set","url":"/docs/latest@main/Set"},{"label":"OrderedSet","url":"/docs/latest@main/OrderedSet"},{"label":"Stack","url":"/docs/latest@main/Stack"},{"label":"Range()","url":"/docs/latest@main/Range()"},{"label":"Repeat()","url":"/docs/latest@main/Repeat()"},{"label":"Record","url":"/docs/latest@main/Record"},{"label":"Record.Factory","url":"/docs/latest@main/Record.Factory"},{"label":"Seq","url":"/docs/latest@main/Seq"},{"label":"Seq.Keyed","url":"/docs/latest@main/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/latest@main/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/latest@main/Seq.Set"},{"label":"Collection","url":"/docs/latest@main/Collection"},{"label":"Collection.Keyed","url":"/docs/latest@main/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/latest@main/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/latest@main/Collection.Set"},{"label":"ValueObject","url":"/docs/latest@main/ValueObject"},{"label":"fromJS()","url":"/docs/latest@main/fromJS()"},{"label":"is()","url":"/docs/latest@main/is()"},{"label":"hash()","url":"/docs/latest@main/hash()"},{"label":"isImmutable()","url":"/docs/latest@main/isImmutable()"},{"label":"isCollection()","url":"/docs/latest@main/isCollection()"},{"label":"isKeyed()","url":"/docs/latest@main/isKeyed()"},{"label":"isIndexed()","url":"/docs/latest@main/isIndexed()"},{"label":"isAssociative()","url":"/docs/latest@main/isAssociative()"},{"label":"isOrdered()","url":"/docs/latest@main/isOrdered()"},{"label":"isValueObject()","url":"/docs/latest@main/isValueObject()"},{"label":"isSeq()","url":"/docs/latest@main/isSeq()"},{"label":"isList()","url":"/docs/latest@main/isList()"},{"label":"isMap()","url":"/docs/latest@main/isMap()"},{"label":"isOrderedMap()","url":"/docs/latest@main/isOrderedMap()"},{"label":"isStack()","url":"/docs/latest@main/isStack()"},{"label":"isSet()","url":"/docs/latest@main/isSet()"},{"label":"isOrderedSet()","url":"/docs/latest@main/isOrderedSet()"},{"label":"isRecord()","url":"/docs/latest@main/isRecord()"},{"label":"get()","url":"/docs/latest@main/get()"},{"label":"has()","url":"/docs/latest@main/has()"},{"label":"remove()","url":"/docs/latest@main/remove()"},{"label":"set()","url":"/docs/latest@main/set()"},{"label":"update()","url":"/docs/latest@main/update()"},{"label":"getIn()","url":"/docs/latest@main/getIn()"},{"label":"hasIn()","url":"/docs/latest@main/hasIn()"},{"label":"removeIn()","url":"/docs/latest@main/removeIn()"},{"label":"setIn()","url":"/docs/latest@main/setIn()"},{"label":"updateIn()","url":"/docs/latest@main/updateIn()"},{"label":"merge()","url":"/docs/latest@main/merge()"},{"label":"mergeWith()","url":"/docs/latest@main/mergeWith()"},{"label":"mergeDeep()","url":"/docs/latest@main/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/latest@main/mergeDeepWith()"}]},"__N_SSG":true}