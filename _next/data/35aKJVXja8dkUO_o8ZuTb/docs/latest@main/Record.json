{"pageProps":{"versions":["v4.0.0-rc.12","v3.8.2","latest@main"],"version":"latest@main","def":{"qualifiedName":"Record","doc":{"synopsis":"<p>A record is similar to a JS object, but enforces a specific set of allowed\nstring keys, and has default values.</p>\n","description":"<p>The <code><a href=\"/docs/latest@main/Record\">Record()</a></code> function produces new Record Factories, which when called\ncreate Record instances.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Record</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> ABRecord <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> myRecord <span class=\"token operator\" >=</span> ABRecord<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span></code><p>Records always have a value for the keys they define. <code><a href=\"/docs/latest@main/remove()\">remove</a></code>ing a key\nfrom a record simply resets it to the default value for that key.</p>\n<code class=\"codeBlock\">myRecord<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 1\n</span>myRecord<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 3\n</span><span class=\"token keyword\" >const</span> myRecordWithoutB <span class=\"token operator\" >=</span> myRecord<span class=\"token punctuation\" >.</span>remove<span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span>\nmyRecordWithoutB<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 2</span></code><p>Values provided to the constructor not found in the Record type will\nbe ignored. For example, in this case, ABRecord is provided a key &quot;x&quot; even\nthough only &quot;a&quot; and &quot;b&quot; have been defined. The value for &quot;x&quot; will be\nignored for this record.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> myRecord <span class=\"token operator\" >=</span> ABRecord<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nmyRecord<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span></code><p>Because Records have a known set of string keys, property get access works\nas expected, however property sets will throw an Error.</p>\n<p>Note: IE8 does not support property access. Only use <code><a href=\"/docs/latest@main/Record#get()\">get()</a></code> when\nsupporting IE8.</p>\n<code class=\"codeBlock\">myRecord<span class=\"token punctuation\" >.</span>b <span class=\"token comment\" spellcheck=\"true\">// 3\n</span>myRecord<span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >5</span> <span class=\"token comment\" spellcheck=\"true\">// throws Error</span></code><p>Record Types can be extended as well, allowing for custom methods on your\nRecord. This is not a common pattern in functional environments, but is in\nmany JS programs.</p>\n<p>However Record Types are more restricted than typical JavaScript classes.\nThey do not use a class constructor, which also means they cannot use\nclass properties (since those are technically part of a constructor).</p>\n<p>While Record Types can be syntactically created with the JavaScript <code><span class=\"token keyword\" >class</span></code>\nform, the resulting Record function is actually a factory function, not a\nclass constructor. Even though Record Types are not classes, JavaScript\ncurrently requires the use of <code><span class=\"token keyword\" >new</span></code> when creating new Record instances if\nthey are defined as a <code><span class=\"token keyword\" >class</span></code>.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >class</span> <span class=\"token class-name\" >ABRecord</span> <span class=\"token keyword\" >extends</span> <span class=\"token class-name\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  getAB<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >+</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>b<span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> myRecord <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >ABRecord</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nmyRecord<span class=\"token punctuation\" >.</span>getAB<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 4</span></code><p><strong>Flow Typing Records:</strong></p>\n<p>Immutable.js exports two Flow types designed to make it easier to use\nRecords with flow typed code, <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code> and <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>.</p>\n<p>When defining a new kind of Record factory function, use a flow type that\ndescribes the values the record contains along with <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>.\nTo type instances of the Record (which the factory function returns),\nuse <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>.</p>\n<p>Typically, new Record definitions will export both the Record factory\nfunction as well as the Record instance type for use in other code.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >import</span> type <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span> <span class=\"token punctuation\" >}</span> from <span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Use RecordFactory&lt;TProps> for defining new Record factory functions.\n</span>type <span class=\"token qualifier\" >Point3</span>DProps <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> number <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> defaultValues<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Point3</span>DProps <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> makePoint3D<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Point3</span>DProps<span class=\"token operator\" >></span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span>defaultValues<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >export</span> makePoint3D<span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Use RecordOf&lt;T> for defining new instances of that Record.\n</span><span class=\"token keyword\" >export</span> type <span class=\"token qualifier\" >Point3</span>D <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Point3</span>DProps<span class=\"token operator\" >></span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> some3DPoint<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Point3</span>D <span class=\"token operator\" >=</span> makePoint3D<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p><strong>Flow Typing Record Subclasses:</strong></p>\n<p>Records can be subclassed as a means to add additional methods to Record\ninstances. This is generally discouraged in favor of a more functional API,\nsince Subclasses have some minor overhead. However the ability to create\na rich API on Record types can be quite valuable.</p>\n<p>When using Flow to type Subclasses, do not use <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>,\ninstead apply the props type when subclassing:</p>\n<code class=\"codeBlock\">type <span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span> <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>name<span class=\"token punctuation\" >:</span> string<span class=\"token punctuation\" >,</span> age<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> defaultValues<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span> <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Aristotle'</span><span class=\"token punctuation\" >,</span> age<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2400</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> <span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Record</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span>defaultValues<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >class</span> <span class=\"token class-name\" >Person</span> <span class=\"token keyword\" >extends</span> <span class=\"token class-name\" >PersonRecord</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  getName<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> string <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'name'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >}</span>\n\n  setName<span class=\"token punctuation\" >(</span>name<span class=\"token punctuation\" >:</span> string<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> <span class=\"token var\" >this</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'name'</span><span class=\"token punctuation\" >,</span> name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span></code><p><strong>Choosing Records vs plain JavaScript objects</strong></p>\n<p>Records offer a persistently immutable alternative to plain JavaScript\nobjects, however they&#39;re not required to be used within Immutable.js\ncollections. In fact, the deep-access and deep-updating functions\nlike <code><a href=\"/docs/latest@main/Record#getIn()\">getIn()</a></code> and <code><a href=\"/docs/latest@main/Record#setIn()\">setIn()</a></code> work with plain JavaScript Objects as well.</p>\n<p>Deciding to use Records or Objects in your application should be informed\nby the tradeoffs and relative benefits of each:</p>\n<ul>\n<li><p><em>Runtime immutability</em>: plain JS objects may be carefully treated as\nimmutable, however Record instances will <em>throw</em> if attempted to be\nmutated directly. Records provide this additional guarantee, however at\nsome marginal runtime cost. While JS objects are mutable by nature, the\nuse of type-checking tools like <a href=\"https://medium.com/@gcanti/immutability-with-flow-faa050a1aef4\">Flow</a>\ncan help gain confidence in code written to favor immutability.</p>\n</li>\n<li><p><em>Value equality</em>: Records use value equality when compared with <code><a href=\"/docs/latest@main/is()\">is()</a></code>\nor <code>record<span class=\"token punctuation\" >.</span>equals<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>. That is, two Records with the same keys and values\nare equal. Plain objects use <em>reference equality</em>. Two objects with the\nsame keys and values are not equal since they are different objects.\nThis is important to consider when using objects as keys in a <code><a href=\"/docs/latest@main/Map\">Map</a></code> or\nvalues in a <code><a href=\"/docs/latest@main/Set\">Set</a></code>, which use equality when retrieving values.</p>\n</li>\n<li><p><em>API methods</em>: Records have a full featured API, with methods like\n<code><span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>, and <code><span class=\"token punctuation\" >.</span>equals<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>. These can make working with these values\neasier, but comes at the cost of not allowing keys with those names.</p>\n</li>\n<li><p><em>Default values</em>: Records provide default values for every key, which\ncan be useful when constructing Records with often unchanging values.\nHowever default values can make using Flow and TypeScript more laborious.</p>\n</li>\n<li><p><em>Serialization</em>: Records use a custom internal representation to\nefficiently store and update their values. Converting to and from this\nform isn&#39;t free. If converting Records to plain objects is common,\nconsider sticking with plain objects to begin with.</p>\n</li>\n</ul>\n","notes":[]},"functions":{"isRecord":{"name":"Record.isRecord","label":"Record.isRecord()","id":"isRecord()","isStatic":true,"signatures":[{"line":2404,"params":[{"name":"maybeRecord","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/latest@main/Record#isRecord()"},"getDescriptiveName":{"name":"Record.getDescriptiveName","label":"Record.getDescriptiveName()","id":"getDescriptiveName()","isStatic":true,"signatures":[{"line":2423,"params":[{"name":"record","type":{"k":12,"name":"Record","args":[{"k":1}],"url":"/docs/latest@main/Record"}}],"type":{"k":7}}],"url":"/docs/latest@main/Record#getDescriptiveName()"}},"call":{"name":"Record","label":"Record()","id":"Record()","doc":{"synopsis":"<p>Unlike other types in Immutable.js, the <code><a href=\"/docs/latest@main/Record\">Record()</a></code> function creates a new\nRecord Factory, which is a function that creates Record instances.</p>\n","description":"<p>See above for examples of using <code><a href=\"/docs/latest@main/Record\">Record()</a></code>.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Record\">Record</a></code> is a factory function and not a class, and does not use the\n<code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n","notes":[]},"signatures":[{"line":2503,"typeParams":["TProps"],"params":[{"name":"defaultValues","type":{"k":11,"param":"TProps"}},{"name":"name","type":{"k":7},"optional":true}],"type":{"k":12,"name":"Record.Factory","args":[{"k":11,"param":"TProps"}],"url":"/docs/latest@main/Record.Factory"}}],"url":"/docs/latest@main/Record#Record()"},"interface":{"members":{"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","signatures":[{"line":2511,"params":[{"name":"key","type":{"k":7}}],"type":{"k":5}}],"url":"/docs/latest@main/Record#has()"},"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","signatures":[{"line":2521,"typeParams":["K"],"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"notSetValue","type":{"k":2},"optional":true}],"type":{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":11,"param":"K"}}},{"line":2522,"typeParams":["T"],"params":[{"name":"key","type":{"k":7}},{"name":"notSetValue","type":{"k":11,"param":"T"}}],"type":{"k":11,"param":"T"}}],"url":"/docs/latest@main/Record#get()"},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","signatures":[{"line":2526,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":5}}],"url":"/docs/latest@main/Record#hasIn()"},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","signatures":[{"line":2527,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":2}}],"url":"/docs/latest@main/Record#getIn()"},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","signatures":[{"line":2531,"params":[{"name":"other","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/latest@main/Record#equals()"},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","signatures":[{"line":2532,"type":{"k":6}}],"url":"/docs/latest@main/Record#hashCode()"},"set":{"name":"set","label":"set()","id":"set()","group":"Persistent changes","signatures":[{"line":2536,"typeParams":["K"],"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"value","type":{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":11,"param":"K"}}}],"type":{"k":3}}],"url":"/docs/latest@main/Record#set()"},"update":{"name":"update","label":"update()","id":"update()","group":"Persistent changes","signatures":[{"line":2537,"typeParams":["K"],"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":11,"param":"K"}}}],"type":{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":11,"param":"K"}}}}],"type":{"k":3}}],"url":"/docs/latest@main/Record#update()"},"merge":{"name":"merge","label":"merge()","id":"merge()","group":"Persistent changes","signatures":[{"line":2541,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/Record#merge()"},"mergeDeep":{"name":"mergeDeep","label":"mergeDeep()","id":"mergeDeep()","group":"Persistent changes","signatures":[{"line":2544,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/Record#mergeDeep()"},"mergeWith":{"name":"mergeWith","label":"mergeWith()","id":"mergeWith()","group":"Persistent changes","signatures":[{"line":2548,"params":[{"name":"merger","type":{"k":10,"params":[{"name":"oldVal","type":{"k":2}},{"name":"newVal","type":{"k":2}},{"name":"key","type":{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}}}],"type":{"k":2}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/Record#mergeWith()"},"mergeDeepWith":{"name":"mergeDeepWith","label":"mergeDeepWith()","id":"mergeDeepWith()","group":"Persistent changes","signatures":[{"line":2552,"params":[{"name":"merger","type":{"k":10,"params":[{"name":"oldVal","type":{"k":2}},{"name":"newVal","type":{"k":2}},{"name":"key","type":{"k":2}}],"type":{"k":2}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/Record#mergeDeepWith()"},"delete":{"name":"delete","label":"delete()","id":"delete()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new instance of this Record type with the value for the\nspecific key set to its default value.</p>\n","description":"","notes":[{"name":"alias","body":"remove"}]},"signatures":[{"line":2563,"typeParams":["K"],"params":[{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":3}}],"url":"/docs/latest@main/Record#delete()"},"clear":{"name":"clear","label":"clear()","id":"clear()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new instance of this Record type with all values set\nto their default values.</p>\n","description":"","notes":[]},"signatures":[{"line":2570,"type":{"k":3}}],"url":"/docs/latest@main/Record#clear()"},"setIn":{"name":"setIn","label":"setIn()","id":"setIn()","group":"Deep persistent changes","signatures":[{"line":2574,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"value","type":{"k":2}}],"type":{"k":3}}],"url":"/docs/latest@main/Record#setIn()"},"updateIn":{"name":"updateIn","label":"updateIn()","id":"updateIn()","group":"Deep persistent changes","signatures":[{"line":2575,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":2}}],"type":{"k":2}}}],"type":{"k":3}}],"url":"/docs/latest@main/Record#updateIn()"},"mergeIn":{"name":"mergeIn","label":"mergeIn()","id":"mergeIn()","group":"Deep persistent changes","signatures":[{"line":2579,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":2}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/Record#mergeIn()"},"mergeDeepIn":{"name":"mergeDeepIn","label":"mergeDeepIn()","id":"mergeDeepIn()","group":"Deep persistent changes","signatures":[{"line":2580,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":2}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/Record#mergeDeepIn()"},"deleteIn":{"name":"deleteIn","label":"deleteIn()","id":"deleteIn()","group":"Deep persistent changes","doc":{"synopsis":"","description":"","notes":[{"name":"alias","body":"removeIn"}]},"signatures":[{"line":2588,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":3}}],"url":"/docs/latest@main/Record#deleteIn()"},"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Record to equivalent native JavaScript Object.</p>\n","description":"<p>Note: This method may not be overridden. Objects with custom\nserialization to plain JS may override toJSON() instead.</p>\n","notes":[]},"signatures":[{"line":2599,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":2}}]}}],"url":"/docs/latest@main/Record#toJS()"},"toJSON":{"name":"toJSON","label":"toJSON()","id":"toJSON()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Record to equivalent native JavaScript Object.</p>\n","description":"","notes":[]},"signatures":[{"line":2604,"type":{"k":11,"param":"TProps"}}],"url":"/docs/latest@main/Record#toJSON()"},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Record to equivalent JavaScript Object.</p>\n","description":"","notes":[]},"signatures":[{"line":2609,"type":{"k":11,"param":"TProps"}}],"url":"/docs/latest@main/Record#toObject()"},"withMutations":{"name":"withMutations","label":"withMutations()","id":"withMutations()","group":"Transient changes","doc":{"synopsis":"<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Record#withMutations()\">withMutations</a></code>! Only <code><a href=\"/docs/latest@main/Record#set()\">set</a></code> may be used mutatively.</p>\n","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#withMutations()\">Map#withMutations</a></code></p>\n"}]},"signatures":[{"line":2619,"params":[{"name":"mutator","type":{"k":10,"params":[{"name":"mutable","type":{"k":3}}],"type":{"k":2}}}],"type":{"k":3}}],"url":"/docs/latest@main/Record#withMutations()"},"asMutable":{"name":"asMutable","label":"asMutable()","id":"asMutable()","group":"Transient changes","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"}]},"signatures":[{"line":2624,"type":{"k":3}}],"url":"/docs/latest@main/Record#asMutable()"},"wasAltered":{"name":"wasAltered","label":"wasAltered()","id":"wasAltered()","group":"Transient changes","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#wasAltered()\">Map#wasAltered</a></code></p>\n"}]},"signatures":[{"line":2629,"type":{"k":5}}],"url":"/docs/latest@main/Record#wasAltered()"},"asImmutable":{"name":"asImmutable","label":"asImmutable()","id":"asImmutable()","group":"Transient changes","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"}]},"signatures":[{"line":2634,"type":{"k":3}}],"url":"/docs/latest@main/Record#asImmutable()"},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Sequence algorithms","signatures":[{"line":2638,"type":{"k":12,"name":"Seq.Keyed","args":[{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}},{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}}}],"url":"/docs/latest@main/Seq.Keyed"}}],"url":"/docs/latest@main/Record#toSeq()"},"[Symbol.iterator]":{"name":"[Symbol.iterator]","label":"[Symbol.iterator]()","id":"[Symbol.iterator]()","group":"Sequence algorithms","signatures":[{"line":2640,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":[{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}},{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}}}]}]}}],"url":"/docs/latest@main/Record#[Symbol.iterator]()"}},"line":2508,"typeParams":["TProps"]},"label":"Record","url":"/docs/latest@main/Record"},"sidebarLinks":[{"label":"List","url":"/docs/latest@main/List"},{"label":"Map","url":"/docs/latest@main/Map"},{"label":"OrderedMap","url":"/docs/latest@main/OrderedMap"},{"label":"Set","url":"/docs/latest@main/Set"},{"label":"OrderedSet","url":"/docs/latest@main/OrderedSet"},{"label":"Stack","url":"/docs/latest@main/Stack"},{"label":"Range()","url":"/docs/latest@main/Range()"},{"label":"Repeat()","url":"/docs/latest@main/Repeat()"},{"label":"Record","url":"/docs/latest@main/Record"},{"label":"Record.Factory","url":"/docs/latest@main/Record.Factory"},{"label":"Seq","url":"/docs/latest@main/Seq"},{"label":"Seq.Keyed","url":"/docs/latest@main/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/latest@main/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/latest@main/Seq.Set"},{"label":"Collection","url":"/docs/latest@main/Collection"},{"label":"Collection.Keyed","url":"/docs/latest@main/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/latest@main/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/latest@main/Collection.Set"},{"label":"ValueObject","url":"/docs/latest@main/ValueObject"},{"label":"fromJS()","url":"/docs/latest@main/fromJS()"},{"label":"is()","url":"/docs/latest@main/is()"},{"label":"hash()","url":"/docs/latest@main/hash()"},{"label":"isImmutable()","url":"/docs/latest@main/isImmutable()"},{"label":"isCollection()","url":"/docs/latest@main/isCollection()"},{"label":"isKeyed()","url":"/docs/latest@main/isKeyed()"},{"label":"isIndexed()","url":"/docs/latest@main/isIndexed()"},{"label":"isAssociative()","url":"/docs/latest@main/isAssociative()"},{"label":"isOrdered()","url":"/docs/latest@main/isOrdered()"},{"label":"isValueObject()","url":"/docs/latest@main/isValueObject()"},{"label":"isSeq()","url":"/docs/latest@main/isSeq()"},{"label":"isList()","url":"/docs/latest@main/isList()"},{"label":"isMap()","url":"/docs/latest@main/isMap()"},{"label":"isOrderedMap()","url":"/docs/latest@main/isOrderedMap()"},{"label":"isStack()","url":"/docs/latest@main/isStack()"},{"label":"isSet()","url":"/docs/latest@main/isSet()"},{"label":"isOrderedSet()","url":"/docs/latest@main/isOrderedSet()"},{"label":"isRecord()","url":"/docs/latest@main/isRecord()"},{"label":"get()","url":"/docs/latest@main/get()"},{"label":"has()","url":"/docs/latest@main/has()"},{"label":"remove()","url":"/docs/latest@main/remove()"},{"label":"set()","url":"/docs/latest@main/set()"},{"label":"update()","url":"/docs/latest@main/update()"},{"label":"getIn()","url":"/docs/latest@main/getIn()"},{"label":"hasIn()","url":"/docs/latest@main/hasIn()"},{"label":"removeIn()","url":"/docs/latest@main/removeIn()"},{"label":"setIn()","url":"/docs/latest@main/setIn()"},{"label":"updateIn()","url":"/docs/latest@main/updateIn()"},{"label":"merge()","url":"/docs/latest@main/merge()"},{"label":"mergeWith()","url":"/docs/latest@main/mergeWith()"},{"label":"mergeDeep()","url":"/docs/latest@main/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/latest@main/mergeDeepWith()"}]},"__N_SSG":true}